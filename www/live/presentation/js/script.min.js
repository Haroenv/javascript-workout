require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"kLUUT7":[function(require,module,exports){
module.exports = (function(){
	
	var Constants = {
		GO_TO_PREVIOUS_SLIDE : 'goToPreviousSlide',
		GO_TO_NEXT_SLIDE : 'goToNextSlide',
		SET_CURRENT_SLIDE_INDEX : 'setCurrentSlideIndex',

		ROLE_PRESENTATION : 'presentation',
		ROLE_MOBILE : 'mobile',

		STATE_ACTIVE : 'active',
		STATE_INACTIVE : 'inactive',

		SET_SUBSTATE : 'setSubstate',

		SHAKE_YOUR_PHONES_INTRO : 'shakeYourPhonesIntro',
		SHAKE_YOUR_PHONES_GAME : 'shakeYourPhonesGame',
		SHAKE_YOUR_PHONES_FINISHED : 'shakeYourPhonesFinished',

		SHAKE_YOUR_PHONES_CLIENT_ADDED : 'shakeYourPhonesClientAdded',
		SHAKE_YOUR_PHONES_CLIENT_REMOVED : 'shakeYourPhonesClientRemoved',
		SHAKE_YOUR_PHONES_CLIENT_LIST : 'shakeYourPhonesClientList',
		SHAKE_YOUR_PHONES_CLIENT_UPDATE : 'shakeYourPhonesClientUpdate',

		HIGHEST_HEARTRATE_GAME_INTRO : 'highestHeartrateGameIntro',
		HIGHEST_HEARTRATE_GAME_GAME : 'highestHeartrateGameGame',
		HIGHEST_HEARTRATE_GAME_FINISHED : 'highestHeartrateGameFinished',

		LOWEST_HEARTRATE_GAME_INTRO : 'lowestHeartrateGameIntro',
		LOWEST_HEARTRATE_GAME_GAME : 'lowestHeartrateGameGame',
		LOWEST_HEARTRATE_GAME_FINISHED : 'lowestHeartrateGameFinished',

		REACT_PHONES_INTRO : 'reactPhonesIntro',
		REACT_PHONES_GAME : 'reactPhonesGame',
		REACT_PHONES_FINISHED : 'reactPhonesFinished',

		REACT_PHONES_CLIENT_ADDED : 'reactPhonesClientAdded',
		REACT_PHONES_CLIENT_REMOVED : 'reactPhonesClientRemoved',
		REACT_PHONES_CLIENT_LIST : 'reactPhonesClientList',
		REACT_PHONES_CLIENT_UPDATE : 'reactPhonesClientUpdate',

		DANCE_PAD_GAME_INTRO : 'dancePadGameIntro',
		DANCE_PAD_GAME_GAME : 'dancePadGameGame',
		DANCE_PAD_GAME_FINISHED : 'dancePadGameFinished',

		UPDATE_MAXIMUM_MOTION : 'updateMaximumMotion',
		UPDATE_REACTION_SPEED : 'updateReactionSpeed',
		HEART_RATE_POLAR : 'heartRatePolar',
		HEART_RATE_SPARK : 'heartRateSpark',
		SELECT_WINNER : 'selectWinner',
		BLINK : 'blink',

		CHILD_APP_SAVE_CODE : 'childAppSaveCode',
		OPEN_COMMAND_LINE: 'openCommandLine'
	};

	return Constants;

})();
},{}],"Constants":[function(require,module,exports){
module.exports=require('kLUUT7');
},{}],3:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');

	var HeartRateCanvas = Class.extend({
		pixelsPerBeatAt60BPM: 100,
		frameNr: 0,
		fps: 60,
		numValues: 0,
		numValuesMargin: 9,
		numValuesWithMargin: 9,
		heartRate: 0,
		backgroundColor: '#fff',
		strokeColor: '#00f',
		width: 0,
		height: 0,
		init: function(canvas) {
			this.canvas = canvas;
			this.width = this.canvas.width;
			this.height = this.canvas.height;
			this._initSizeDependedVariables();

			this.heartRateTickInterval = Math.round(this.fps * 60 / this.heartRate);

			this.stage = new createjs.Stage(this.canvas);
			
			this.drawingShape = new createjs.Shape();
			this.stage.addChild(this.drawingShape);

			createjs.Ticker.timingMode = createjs.Ticker.RAF_SYNCHED;
			createjs.Ticker.setFPS(this.fps);
			this._tick = $.proxy(this.tick, this);
			createjs.Ticker.addEventListener("tick", this._tick);
		},
		resize: function(w, h) {
			this.width = this.canvas.width = w;
			this.height = this.canvas.height = h;
			this._initSizeDependedVariables();
		},
		_initSizeDependedVariables: function() {
			this.numValues = Math.round(this.width * 0.80);
			this.numValuesWithMargin = this.numValues + this.numValuesMargin;
			if(!this.values) {
				this.values = [];
			}
			this.values.length = this.numValuesWithMargin;
			this.canvasVerticalCenter = this.height / 2;
		},
		dispose: function() {
			createjs.Ticker.removeEventListener("tick", this._tick);
		},
		tick: function() {
			this.frameNr++;

			this.drawingShape.graphics.clear()
				//.beginFill(this.backgroundColor)
				//.drawRect(0, 0, this.width, this.height)
				//.endFill()
				.beginStroke(this.strokeColor);

			this.drawingShape.graphics.moveTo(0, this.canvasVerticalCenter - (this.canvasVerticalCenter * this.values[0]));
			for(var i = 1; i < this.numValues; i++) {
				this.drawingShape.graphics.lineTo(i, this.canvasVerticalCenter - (this.canvasVerticalCenter * this.values[i]));
			}
			this.drawingShape.graphics.endStroke();

			this.drawingShape.graphics.beginFill(this.strokeColor)
				.drawCircle(this.numValues - 1, this.canvasVerticalCenter - (this.canvasVerticalCenter * this.values[this.numValues - 1]), 2)
				.endFill();

			//does the tick align with a beat?
			if(this.heartRate > 0 && this.frameNr % this.heartRateTickInterval === 0) {
				this.frameNr = 0;//reset to zero
				var strength = 0.7 + Math.random() * 0.3;
				this.values[this.numValuesWithMargin - this.numValuesMargin - 1] = 0.05 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 0] = 0.1 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 1] = 0.3 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 2] = 1 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 3] = 0 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 4] = -1 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 5] = -0.3 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 6] = -0.1 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 7] = -0.05 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 8] = 0 * strength;
			}

			this.values.shift();
			this.values.shift();
			this.values.push(Math.random() * 0.05 - 0.1);
			this.values.push(Math.random() * 0.05 - 0.1);

			this.stage.update();
		},
		updateHeartRate: function(heartRate) {
			this.heartRate = heartRate;
			if(this.heartRate > 0) {
				this.heartRateTickInterval = Math.round(this.fps * 60 / this.heartRate);
			}
		},
	});

	return HeartRateCanvas;

})();
},{"core/Class":"Hzu0go"}],4:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');
	var Slide = require('./Slide');
	var Constants = require('Constants');

	var KEYCODE_LEFT = 37;
	var KEYCODE_RIGHT = 39;

	var Presentation = Class.extend({
		currentSlideIndex: 0,
		socket: false,
		iframes: [],
		numIframes: 3,
		slides: [],
		ip: false,
		port: false,
		init: function() {
			console.log("[Presentation] init");

			$('#consoleModal').on('show.bs.modal', function (e) {
				var w = $('#consoleModal iframe')[0].contentWindow;
				w.postMessage('consoleModalOpen', 'http://localhost:3000');
			});

			this.createIframes();

			$("#login form").on('submit', $.proxy(this.loginSubmitHandler, this));
			$(window).on('keydown', $.proxy(this.keydownHandler, this));
			$('body').on(Constants.GO_TO_PREVIOUS_SLIDE, $.proxy(this.goToPreviousSlide, this));
			$('body').on(Constants.GO_TO_NEXT_SLIDE, $.proxy(this.goToNextSlide, this));
			$('body').on(Constants.OPEN_COMMAND_LINE, $.proxy(this.openCommandLine, this));
		},

		createIframes: function() {
			for(var i = 0; i < this.numIframes; i++) {
				var $iframe = $('<iframe class="slide-frame" />');
				this.iframes.push($iframe);
				$('#presentation').append($iframe);
			}
		},

		loginSubmitHandler: function(event) {
			event.preventDefault();
			var that = this;
			$.post('/login', {
				email: $('[name=email]').val(),
				password: $('[name=password]').val()
			}).done(function(result){
				that.slides = [];
				that.ip = result.ip;
				that.port = parseInt(result.port);
				var $slideMenu = $('#slideMenu');
				var numSlides = result.slides.length;
				for(var i = 0; i < numSlides; i++) {
					var slide = new Slide(result.slides[i]);
					that.slides.push(slide);
					$slideMenu.append('<li><a href="#" data-slidenr="' + i + '">' + (i + 1) + ' ' + slide.name + '</a></li>');
				}
				$slideMenu.find('a').on('click', function(event){
					event.preventDefault();
					that.tryToSend(Constants.SET_CURRENT_SLIDE_INDEX, $(this).data('slidenr'));
				});
				that.connectSocket(result.token);
			});
		},

		connectSocket: function(token) {
			this.token = token;
			this.socket = io.connect('/', {
				query: 'token=' + token
			});
			this.socket.on('connect', $.proxy(this.socketConnectHandler, this));
			this.socket.on('disconnect', $.proxy(this.socketDisconnectHandler, this));
			this.socket.on('currentSlideIndexChanged', $.proxy(this.currentSlideIndexChangedHandler, this));
			this.socket.on(Constants.HEART_RATE_POLAR, $.proxy(this.heartRatePolarHandler, this));
		},

		socketConnectHandler: function() {
			$('#login').hide();
		},

		socketDisconnectHandler: function() {
			$('#login').show();
		},

		currentSlideIndexChangedHandler: function(currentSlideIndex) {
			currentSlideIndex = parseInt(currentSlideIndex);
			this.currentSlideIndex = currentSlideIndex;
			var currentSlide = this.getSlideByIndex(currentSlideIndex);
			var previousSlide = this.getSlideByIndex(currentSlideIndex - 1);
			var nextSlide = this.getSlideByIndex(currentSlideIndex + 1);
			//
			var currentIframe = this.getIframeForSlide(currentSlide, [previousSlide, nextSlide]);
			if(currentIframe) {
				if(currentSlide.data.presentation && currentSlide.data.presentation.url) {
					currentSlide.attachToIframe(currentIframe, currentSlide.data.presentation.url);
				} else {
					currentSlide.attachToIframe(currentIframe, "slides/" + currentSlide.name + '.html?token=' + this.token);
				}
				currentSlide.setState(Constants.STATE_ACTIVE);
				currentSlide.setServerInfo(this.ip, this.port);
				$(currentIframe).css('left', 0);
			}
			var previousIframe = this.getIframeForSlide(previousSlide, [currentSlide, nextSlide]);
			if(previousIframe) {
				if(previousSlide.data.presentation && previousSlide.data.presentation.url) {
					previousSlide.attachToIframe(previousIframe, previousSlide.data.presentation.url);
				} else {
					previousSlide.attachToIframe(previousIframe, "slides/" + previousSlide.name + '.html?token=' + this.token);
				}
				previousSlide.setState(Constants.STATE_INACTIVE);
				previousSlide.setServerInfo(this.ip, this.port);
				$(previousIframe).css('left', '-100%');
			}
			var nextIframe = this.getIframeForSlide(nextSlide, [previousSlide, currentSlide]);
			if(nextIframe) {
				if(nextSlide.data.presentation && nextSlide.data.presentation.url) {
					nextSlide.attachToIframe(nextIframe, nextSlide.data.presentation.url);
				} else {
					nextSlide.attachToIframe(nextIframe, "slides/" + nextSlide.name + '.html?token=' + this.token);
				}
				nextSlide.setState(Constants.STATE_INACTIVE);
				nextSlide.setServerInfo(this.ip, this.port);
				$(nextIframe).css('left', '100%');
			}
		},

		heartRatePolarHandler: function(heartRate) {
			$('#global-heart-rate').text(heartRate + ' bpm');
		},

		getSlideByIndex: function(index) {
			if(index >= 0 && index < this.slides.length) {
				return this.slides[index];
			}
			return false;
		},

		getIframeForSlide: function(slide, slidesNotToClear) {
			if(slide) {
				var $iframe = $('iframe[name=' + slide.name + ']');
				if($iframe.length > 0) {
					return $iframe[0];
				}
				//get a free iframe
				var slideNamesNotToClear = [];
				$(slidesNotToClear).each(function(index, obj){
					slideNamesNotToClear.push(obj.name);
				});
				var $iframes = $('iframe.slide-frame');
				for (var i = $iframes.length - 1; i >= 0; i--) {
					$iframe = $($iframes[i]);
					var name = $iframe.attr('name');
					if(!name || slideNamesNotToClear.indexOf(name) === -1) {
						return $iframe[0];
					}
				}
			}
			return false;
		},

		keydownHandler: function(event) {
			switch(event.keyCode) {
				case KEYCODE_LEFT:
					this.goToPreviousSlide();
					break;
				case KEYCODE_RIGHT:
					this.goToNextSlide();
					break;
			}
		},

		goToPreviousSlide: function() {
			this.tryToSend(Constants.SET_CURRENT_SLIDE_INDEX, this.currentSlideIndex - 1);
		},

		goToNextSlide: function() {
			this.tryToSend(Constants.SET_CURRENT_SLIDE_INDEX, this.currentSlideIndex + 1);
		},

		openCommandLine: function() {
			$('#consoleModal').modal('show');
		},

		tryToSend: function() {
			if(this.socket) {
				this.socket.emit.apply(this.socket, arguments);
			}
		}
	});

	return Presentation;

})();
},{"./Slide":5,"Constants":"kLUUT7","core/Class":"Hzu0go"}],5:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');
	//var Constants = require('Constants');

	var Slide = Class.extend({
		init: function(data) {
			this.data = data;
			this.name = this.data.name;
			this._iframeLoadHandler = $.proxy(this.iframeLoadHandler, this);
		},
		attachToIframe: function(iframe, src) {
			this.iframe = iframe;
			$(iframe).off('load', this._iframeLoadHandler);
			$(iframe).attr('name', this.name);
			if(src !== $(iframe).attr('src')) {
				$(iframe).on('load', this._iframeLoadHandler);
				$(iframe).attr('src', src);
			}
		},
		setState: function(state) {
			this.state = state;
			var w = getIframeWindow(this.iframe);
			if(w && w.setState) {
				w.setState(state);
			}
		},
		setServerInfo: function(ip, port) {
			this.ip = ip;
			this.port = port;
			var w = getIframeWindow(this.iframe);
			if(w && w.setServerInfo) {
				w.setServerInfo(ip, port);
			}
		},
		iframeLoadHandler: function(event) {
			var w = getIframeWindow(this.iframe);
			if(w) {
				if(w.setState) {
					w.setState(this.state);
				}
				if(w.setServerInfo) {
					w.setServerInfo(this.ip, this.port);
				}
			}
		}
	});

	function getIframeWindow(iframe_object) {
		  var doc;

		  if (iframe_object.contentWindow) {
		    return iframe_object.contentWindow;
		  }

		  if (iframe_object.window) {
		    return iframe_object.window;
		  } 

		  if (!doc && iframe_object.contentDocument) {
		    doc = iframe_object.contentDocument;
		  } 

		  if (!doc && iframe_object.document) {
		    doc = iframe_object.document;
		  }

		  if (doc && doc.defaultView) {
		   return doc.defaultView;
		  }

		  if (doc && doc.parentWindow) {
		    return doc.parentWindow;
		  }

		  return undefined;
		}

	return Slide;

})();
},{"core/Class":"Hzu0go"}],6:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');
	var Constants = require('Constants');

	var KEYCODE_LEFT = 37;
	var KEYCODE_RIGHT = 39;

	var ContentBase = Class.extend({
		fps: 60,
		_animationFrameId: false,
		_currentTime: 0,
		_delta: 0,
		_interval: false,
		_lastTime: new Date().getTime(),
		currentFrame: 0,
		slideControlEnabled: true,
		init: function(name) {
			this.name = name;
			this.token = $.getUrlVar('token');
			window.setState = $.proxy(this.setState, this);
			window.setServerInfo = $.proxy(this.setServerInfo, this);
			$(window).on('keydown', $.proxy(this.keydownHandler, this));			
			this.__drawLoop = $.proxy(this._drawLoop, this);
			this._interval = 1000 / this.fps;

			this.socket = io.connect('/', {
				query: 'token=' + this.token + "&slide=" + name
			});
		},

		setState: function(state) {
			if(state !== this.state) {
				this.state = state;
				this.onStateChanged();
				if(this.state === Constants.STATE_ACTIVE) {
					this.currentFrame = 0;
					this._drawLoop();
				} else {
					window.cancelAnimationFrame(this._animationFrameId);
				}
			}
		},

		setServerInfo: function(ip, port) {
			this.ip = ip;
			this.port = port;
		},

		onStateChanged: function() {
		},

		_drawLoop: function() {
			this._animationFrameId = window.requestAnimationFrame(this.__drawLoop);
			this._currentTime = (new Date()).getTime();
		    this._delta = (this._currentTime - this._lastTime);
		    if(this._delta > this._interval) {
		    	this.currentFrame++;
		    	this.drawLoop(this._delta);
		    	this._lastTime = this._currentTime - (this._delta % this._interval);
		    }
		},
		drawLoop: function(delta) {
		},

		keydownHandler: function(event) {
			if(this.slideControlEnabled) {
				switch(event.keyCode) {
					case KEYCODE_LEFT:
						parent.$('body').trigger(Constants.GO_TO_PREVIOUS_SLIDE);
						break;
					case KEYCODE_RIGHT:
						parent.$('body').trigger(Constants.GO_TO_NEXT_SLIDE);
						break;
				}
			}
		},
	});

	return ContentBase;

})();
},{"Constants":"kLUUT7","core/Class":"Hzu0go"}],7:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');

	var DancegameButton = Class.extend({

		init: function(spriteSheet, color, orientation) {
			this.spriteSheet = spriteSheet;
			this.color = color;
			this.orientation = orientation;

			this.state = DancegameButton.STATE_NORMAL;

			this.sprite = new createjs.Sprite(spriteSheet, color);
			this.sprite.regX = this.sprite.getBounds().width / 2;
			this.sprite.regY = this.sprite.getBounds().height / 2;
			switch(orientation) {
				case "up":
				this.sprite.rotation = 180;
					break;
				case "left":
					this.sprite.rotation = 90;
					break;
				case "right":
					this.sprite.rotation = 270;
					break;
			}
		},

		setState: function(state) {
			if(this.state !== state) {
				this.state = state;
				switch(this.state) {
					case DancegameButton.STATE_CORRECT:
						this.gotoAndStop(this.color + '-correct');
						break;
					case DancegameButton.STATE_WRONG:
						this.gotoAndStop(this.color + '-wrong');
						break;
					default:
						this.gotoAndStop(this.color);
						break;
				}
			}
		},

		gotoAndStop: function(frame) {
			this.sprite.gotoAndStop(frame);
		},

		update: function(speed) {
			this.sprite.y += -speed;
		}
	});

	DancegameButton.STATE_NORMAL = 'normal';
	DancegameButton.STATE_CORRECT = 'correct';
	DancegameButton.STATE_WRONG = 'wrong';

	return DancegameButton;

})();
},{"core/Class":"Hzu0go"}],8:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');

	var ScoreBar = Class.extend({
		score: 0,
		init: function() {
			this.display = new createjs.Container();

			var bgGfx = new createjs.Graphics();
			bgGfx.s('#fff').dr(0.5, 0.5, 521, 34).es();
			var bg = new createjs.Shape(bgGfx);

			var gradientGfx = new createjs.Graphics();
			gradientGfx.lf(["#f00","#0f0"], [0, 1], 0, 0, 520, 0).dr(0, 0, 520, 33).ef();
			this.gradient = new createjs.Shape(gradientGfx);
			this.gradient.x = 1;
			this.gradient.y = 1;

			this.gradientMaskGfx = new createjs.Graphics();
			this.gradientMaskGfx.f('#fff').dr(0, 0, 520, 33).ef();
			this.gradientMask = new createjs.Shape(this.gradientMaskGfx);
			this.gradientMask.x = this.gradient.x;
			this.gradientMask.y = this.gradient.y;

			this.gradient.mask = this.gradientMask;

			this.gradientMask.scaleX = 0;

			this.display.addChild(bg, this.gradient);
		},

		setScore: function(value) {
			value = Math.min(1, Math.max(0, value));
			if(value !== this.score) {
				this.score = value;
			}
		},

		update: function() {
			this.gradientMask.scaleX += (this.score - this.gradientMask.scaleX) * 0.05;
		}
	});

	return ScoreBar;

})();
},{"core/Class":"Hzu0go"}],"iZRQ8v":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');
	var DanceGameButton = require('./DanceGameButton');
	var ScoreBar = require('./ScoreBar');

	var DancePadGame = ContentBase.extend({

		tweeningNotes: [],
		notesByTime: {"11":[{"name":"blue-down"}],"29":[{"name":"blue-up"}],"30":[{"name":"blue-down"}],"47":[{"name":"blue-up"}],"48":[{"name":"blue-up"}],"57":[{"name":"orange-down"}],"58":[{"name":"orange-down"}],"85":[{"name":"orange-up"}],"95":[{"name":"orange-down"}],"104":[{"name":"blue-up"}],"106":[{"name":"blue-up"}],"114":[{"name":"blue-down"},{"name":"orange-down"}],"9.9":[{"name":"blue-up"}],"12.1":[{"name":"blue-up"}],"13.2":[{"name":"blue-down"}],"14.3":[{"name":"blue-up"}],"15.2":[{"name":"blue-down"}],"16.3":[{"name":"blue-left"}],"18.4":[{"name":"orange-up"}],"19.5":[{"name":"orange-down"}],"20.6":[{"name":"orange-up"}],"21.6":[{"name":"orange-down"}],"22.6":[{"name":"orange-up"}],"23.7":[{"name":"orange-down"}],"24.8":[{"name":"orange-right"}],"26.8":[{"name":"blue-up"}],"27.9":[{"name":"blue-down"}],"31.1":[{"name":"blue-up"}],"32.2":[{"name":"blue-down"}],"33.2":[{"name":"blue-left"}],"35.3":[{"name":"orange-up"}],"36.4":[{"name":"orange-down"}],"37.5":[{"name":"blue-up"}],"38.5":[{"name":"blue-down"}],"39.6":[{"name":"orange-up"}],"40.6":[{"name":"orange-down"}],"41.7":[{"name":"blue-up"}],"42.7":[{"name":"blue-down"}],"43.8":[{"name":"blue-up"}],"44.3":[{"name":"blue-down"}],"44.9":[{"name":"blue-up"}],"45.4":[{"name":"blue-down"}],"45.9":[{"name":"blue-up"}],"46.4":[{"name":"blue-down"}],"47.5":[{"name":"blue-down"}],"48.6":[{"name":"blue-down"}],"49.1":[{"name":"blue-up"}],"49.6":[{"name":"blue-down"}],"50.1":[{"name":"blue-left"}],"52.2":[{"name":"orange-up"}],"52.8":[{"name":"orange-down"}],"53.3":[{"name":"orange-up"}],"53.8":[{"name":"orange-down"}],"54.3":[{"name":"orange-up"}],"54.9":[{"name":"orange-down"}],"55.4":[{"name":"orange-up"}],"55.9":[{"name":"orange-down"}],"56.5":[{"name":"orange-up"}],"57.5":[{"name":"orange-up"}],"58.5":[{"name":"orange-right"}],"60.8":[{"name":"blue-up"}],"61.8":[{"name":"blue-down"}],"62.8":[{"name":"orange-up"}],"63.9":[{"name":"orange-down"}],"64.9":[{"name":"orange-right"}],"69.1":[{"name":"blue-up"}],"70.2":[{"name":"blue-down"}],"71.3":[{"name":"blue-up"}],"72.3":[{"name":"blue-down"}],"73.4":[{"name":"orange-up"}],"74.4":[{"name":"orange-down"}],"75.4":[{"name":"orange-up"}],"76.5":[{"name":"orange-down"}],"77.6":[{"name":"blue-up"}],"78.1":[{"name":"blue-down"}],"78.6":[{"name":"orange-up"}],"79.2":[{"name":"orange-down"}],"79.7":[{"name":"blue-up"}],"80.2":[{"name":"blue-down"}],"80.8":[{"name":"orange-up"}],"81.3":[{"name":"orange-down"}],"81.8":[{"name":"blue-up"}],"82.3":[{"name":"blue-down"}],"82.8":[{"name":"orange-up"}],"83.4":[{"name":"orange-down"}],"83.9":[{"name":"blue-up"}],"84.4":[{"name":"blue-down"}],"85.5":[{"name":"orange-down"}],"86.1":[{"name":"blue-up"}],"86.6":[{"name":"blue-down"}],"87.1":[{"name":"orange-up"}],"87.6":[{"name":"orange-down"}],"88.1":[{"name":"orange-right"}],"88.7":[{"name":"blue-left"}],"89.2":[{"name":"orange-right"}],"89.7":[{"name":"blue-left"}],"90.3":[{"name":"orange-right"}],"90.7":[{"name":"blue-left"}],"91.3":[{"name":"orange-right"}],"91.9":[{"name":"blue-left"}],"92.4":[{"name":"orange-up"}],"92.9":[{"name":"orange-down"}],"94.5":[{"name":"orange-up"}],"95.5":[{"name":"blue-up"}],"96.1":[{"name":"blue-down"}],"96.6":[{"name":"orange-up"}],"97.1":[{"name":"orange-down"}],"97.7":[{"name":"blue-up"}],"98.2":[{"name":"blue-down"}],"98.7":[{"name":"orange-right"}],"99.2":[{"name":"blue-left"}],"99.7":[{"name":"orange-right"}],"100.3":[{"name":"blue-left"}],"100.8":[{"name":"orange-up"}],"101.3":[{"name":"blue-down"}],"102.9":[{"name":"orange-up"}],"103.4":[{"name":"orange-down"}],"104.6":[{"name":"blue-down"}],"105.1":[{"name":"orange-up"}],"105.6":[{"name":"orange-down"}],"106.6":[{"name":"blue-down"}],"107.1":[{"name":"orange-up"}],"107.7":[{"name":"orange-down"}],"108.3":[{"name":"blue-up"}],"108.7":[{"name":"blue-down"}],"109.3":[{"name":"orange-right"}],"109.8":[{"name":"blue-left"}],"111.3":[{"name":"blue-left"}],"111.4":[{"name":"orange-right"}],"111.9":[{"name":"blue-left"},{"name":"orange-right"}],"112.4":[{"name":"blue-up"},{"name":"orange-up"}],"112.9":[{"name":"orange-up"},{"name":"blue-up"}],"113.5":[{"name":"blue-down"},{"name":"orange-down"}],"114.5":[{"name":"blue-up"},{"name":"orange-up"}],"115.1":[{"name":"orange-down"},{"name":"blue-down"}],"115.6":[{"name":"orange-up"},{"name":"blue-up"}],"116.1":[{"name":"blue-down"},{"name":"orange-down"}],"116.7":[{"name":"blue-left"},{"name":"orange-right"}],"117.2":[{"name":"blue-down"},{"name":"orange-down"},{"name":"blue-left"},{"name":"orange-right"}],"117.7":[{"name":"blue-up"},{"name":"orange-up"}],"118.2":[{"name":"blue-left"},{"name":"orange-right"},{"name":"blue-down"},{"name":"orange-down"}],"118.7":[{"name":"blue-left"},{"name":"blue-down"},{"name":"orange-down"},{"name":"orange-right"}],"119.4":[{"name":"blue-down"},{"name":"blue-left"}],"119.8":[{"name":"blue-up"}],"119.9":[{"name":"blue-left"},{"name":"orange-up"},{"name":"orange-right"}],"120.3":[{"name":"blue-up"}],"120.4":[{"name":"orange-up"},{"name":"orange-right"},{"name":"blue-left"}]},
		noteNameMap: {},
		pressedButtons: [],
		speed: 3,
		timeToReachTarget: 0,
		tolerance: 0.15,
		noteNames: [
			"blue-up",
			"blue-down",
			"blue-left",
			"orange-up",
			"orange-down",
			"orange-right"
		],
		score: 0,
		record: true,
		recordedKeys: {},
		audio: false,
		roundedTime: 0,
		init: function(name) {
			this._super(name);
			console.log("[DancePadGame] init");

			this.parseNotesByTime();

			this.audio = $('audio')[0];

			this._setSubstateHandler = $.proxy(this.setSubstateHandler, this);

			this.socket.on(Constants.SET_SUBSTATE, this._setSubstateHandler);

			console.log($('.substate-intro .btn'));

			$('.substate-intro .btn').on('click', $.proxy(this.startClickHandler, this));
			$('.substate-game .btn').on('click', $.proxy(this.stopClickHandler, this));

			//spacebrew connection
			this.sb = new Spacebrew.Client("localhost", "DDR Presentation");
			this.sb.onBooleanMessage = $.proxy(this.handleButton, this);
			for (var i = this.noteNames.length - 1; i >= 0; i--) {
				this.sb.addSubscribe(this.noteNames[i], "boolean");
			}
			this.sb.connect();

			//game canvas
			this.canvas = document.getElementById('game');
			this.stage = new createjs.Stage(this.canvas);

			var manifest = [
				{ src: "images/dance/dancegame-buttons.png", id: "buttons" }
			];
			this.loader = new createjs.LoadQueue(false);
			this.loader.addEventListener("complete", $.proxy(this.loadCompleteHandler, this));
			this.loader.loadManifest(manifest);

			createjs.Ticker.setFPS(60);
			createjs.Ticker.addEventListener("tick", $.proxy(this.onTick, this));

			this.showCurrentState();
			$(window).on('resize', $.proxy(this.resizeHandler, this));
			this.resizeHandler();

			$(window).on('keyup', $.proxy(this.keyupHandler, this));
		},

		parseNotesByTime: function() {
			var notesByTime = {};
			for(var key in this.notesByTime) {
				notesByTime[parseFloat(key)] = this.notesByTime[key];
			}
			this.notesByTime = notesByTime;
			console.log(this.notesByTime);
		},

		loadCompleteHandler: function() {

			this.buttonsSheet = new createjs.SpriteSheet(
	{
	images: [this.loader.getResult('buttons')], 
	frames:[
	[0, 0, 120, 120, 0, 0, 0],
	[120, 0, 120, 120, 0, 0, 0],
	[240, 0, 120, 120, 0, 0, 0],
	[0, 120, 120, 120, 0, 0, 0],
	[120, 120, 120, 120, 0, 0, 0],
	[240, 120, 120, 120, 0, 0, 0],
	[0, 240, 120, 120, 0, 0, 0],
	[120, 240, 120, 120, 0, 0, 0],
	[240, 240, 120, 120, 0, 0, 0],],
	animations: {
	'blue-wrong':{ frames:[0, ], frequency:4, next:true},
	'orange-wrong':{ frames:[1, ], frequency:4, next:true},
	'orange-correct':{ frames:[2, ], frequency:4, next:true},
	'blue-correct':{ frames:[3, ], frequency:4, next:true},
	'orange-outline':{ frames:[4, ], frequency:4, next:true},
	'blue-outline':{ frames:[5, ], frequency:4, next:true},
	'neutral-outline':{ frames:[6, ], frequency:4, next:true},
	'orange':{ frames:[7, ], frequency:4, next:true},
	'blue':{ frames:[8, ], frequency:4, next:true},}
	});

			this.transparentBlueLeftButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'left');
			this.transparentBlueUpButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'up');
			this.transparentBlueDownButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'down');
			
			this.transparentOrangeDownButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'down');
			this.transparentOrangeUpButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'up');
			this.transparentOrangeRightButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'right');
			
			this.blueLeftContainer = new createjs.Container();
			this.blueUpContainer = new createjs.Container();
			this.blueDownContainer = new createjs.Container();

			this.orangeDownContainer = new createjs.Container();
			this.orangeUpContainer = new createjs.Container();
			this.orangeRightContainer = new createjs.Container();

			this.stage.addChild(this.blueLeftContainer, this.blueUpContainer, this.blueDownContainer, this.orangeDownContainer, this.orangeUpContainer, this.orangeRightContainer);
			this.stage.addChild(this.transparentBlueLeftButton.sprite, this.transparentBlueUpButton.sprite, this.transparentBlueDownButton.sprite, this.transparentOrangeRightButton.sprite, this.transparentOrangeUpButton.sprite, this.transparentOrangeDownButton.sprite);

			this.noteNameMap = {
				"orange-down": {
					orientation: "down",
					container: this.orangeDownContainer,
					transparentButton: this.transparentOrangeDownButton,
					color: "orange"
				},
				"orange-up": {
					orientation: "up",
					container: this.orangeUpContainer,
					transparentButton: this.transparentOrangeUpButton,
					color: "orange"
				},
				"orange-right": {
					orientation: "right",
					container: this.orangeRightContainer,
					transparentButton: this.transparentOrangeRightButton,
					color: "orange"
				},

				"blue-down": {
					orientation: "down",
					container: this.blueDownContainer,
					transparentButton: this.transparentBlueDownButton,
					color: "blue"
				},
				"blue-up": {
					orientation: "up",
					container: this.blueUpContainer,
					transparentButton: this.transparentBlueUpButton,
					color: "blue"
				},
				"blue-left": {
					orientation: "left",
					container: this.blueLeftContainer,
					transparentButton: this.transparentBlueLeftButton,
					color: "blue"
				}
			};

			this.scoreBar = new ScoreBar();
			this.stage.addChild(this.scoreBar.display);

			this.resetGame();
			this.resizeHandler();
		},

		//override setState, not to use drawLoop
		setState: function(state) {
			if(state !== this.state) {
				this.state = state;
				this.onStateChanged();
			}
		},

		setSubstateHandler: function(substate) {
			console.log('setSubstateHandler', this.substate, substate);
			if(this.substate !== substate) {
				this.substate = substate;
				this.showCurrentState();
			}
		},

		map: function(value, istart, istop, ostart, ostop) {
    		return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
  		},

  		round: function(value, numDecimals) {
  			var factor = Math.pow(10, numDecimals);
  			return Math.round(value * factor) / factor;
  		},

		startClickHandler: function() {
			this.socket.emit(Constants.SET_SUBSTATE, Constants.DANCE_PAD_GAME_GAME);
		},

		stopClickHandler: function() {
			this.socket.emit(Constants.SET_SUBSTATE, Constants.DANCE_PAD_GAME_FINISHED);
			this.audio.pause();
			if(this.record) {
				console.log(this.recordedKeys);
			}
		},

		showCurrentState: function() {
			console.log('showCurrentState', this.substate);
			$('.substate').removeClass('active');
			if(this.substate === Constants.DANCE_PAD_GAME_GAME) {
				this.resetGame();
				$('.substate-game').addClass('active');
				if(this.record) {
					this.recordedKeys = {};
				}
				this.roundedTime = 0;
				this.audio.currentTime = 0;
				this.audio.play();
			} else if(this.substate === Constants.DANCE_PAD_GAME_FINISHED) {
				$('.substate-finished').addClass('active');
				if(this.record) {
					console.log(JSON.stringify(this.recordedKeys));
				}
			} else {
				$('.substate-intro').addClass('active');
			}
		},

		resetGame: function() {
			for(var key in this.notesByTime) {
				for (var i = this.notesByTime[key].length - 1; i >= 0; i--) {
					this.notesByTime[key][i].correct = false;
					this.notesByTime[key][i].tweening = false;
				}
			}
			this.setScore(0.5);
		},

		onTick: function(event) {
			if(this.loader.loaded) {
				//show button states
				var noteName;
				var note;
				for (var i = this.noteNames.length - 1; i >= 0; i--) {
					noteName = this.noteNames[i];
					var isDown = (this.pressedButtons.indexOf(noteName) !== -1);
					if(isDown) {
						this.noteNameMap[noteName].transparentButton.gotoAndStop(this.noteNameMap[noteName].color + "-outline");
					} else {
						this.noteNameMap[noteName].transparentButton.gotoAndStop("neutral-outline");
					}
				}
				if(this.substate !== Constants.DANCE_PAD_GAME_INTRO) {
					this.roundedTime = this.round(this.audio.currentTime, 1);
					var timeWithOffset = this.round(this.roundedTime + this.timeToReachTarget, 1);
					if(this.notesByTime[timeWithOffset]) {
						for (var j = this.notesByTime[timeWithOffset].length - 1; j >= 0; j--) {
							var noteByTime = this.notesByTime[timeWithOffset][j];
							if(!noteByTime.tweening) {
								noteByTime.tweening = true;
								var mappedNote = this.noteNameMap[noteByTime.name];
								note = new DanceGameButton(this.buttonsSheet, mappedNote.color, mappedNote.orientation);
								note.time = timeWithOffset;
								note.noteByTime = noteByTime;
								note.sprite.y = this.canvas.height;
								mappedNote.container.addChild(note.sprite);
								this.tweeningNotes.push(note);
							}
						}
					}
					var visibleTweeningNotes = [];
					var min = this.roundedTime - this.tolerance;

					var speed = event.delta/1000*this.pixelsPerSecond;

					for (var k = this.tweeningNotes.length - 1; k >= 0; k--) {
						note = this.tweeningNotes[k];
						note.update(speed);
						//check state
						if(note.noteByTime.correct) {
							if(note.state !== DanceGameButton.STATE_CORRECT) {
								note.setState(DanceGameButton.STATE_CORRECT);
								this.increaseScore();
							}
						} else {
							if(note.time < min) {
								if(note.state !== DanceGameButton.STATE_WRONG) {
									note.setState(DanceGameButton.STATE_WRONG);
									this.decreaseScore();
								}
							}
						}
						if(note.sprite.y > -100) {
							visibleTweeningNotes.push(note);
						} else {
							note.sprite.parent.removeChild(note.sprite);
						}
					}
					this.tweeningNotes = visibleTweeningNotes;
				}
				this.scoreBar.update();
			}
			this.stage.update();
		},

		increaseScore: function() {
			this.setScore(this.score + 0.1);
		},

		decreaseScore: function() {
			this.setScore(this.score - 0.1);
		},

		setScore: function(value) {
			value = Math.min(1, Math.max(0, value));
			if(value !== this.score) {
				this.score = value;
				if(this.scoreBar) {
					this.scoreBar.setScore(this.score);
				}
			}
		},

		keydownHandler: function(event) {
			switch(event.keyCode) {
				case 90: //z - blue up
					return this.handleButton('blue-up', true);
				case 83: //s - blue down
					return this.handleButton('blue-down', true);
				case 81: //q - blue left
					return this.handleButton('blue-left', true);
				case 79: //o - orange up
					return this.handleButton('orange-up', true);
				case 76: //l - orange down
					return this.handleButton('orange-down', true);
				case 77: //m - orange right
					return this.handleButton('orange-right', true);
			}
		},

		keyupHandler: function(event) {
			switch(event.keyCode) {
				case 90: //z - blue up
					return this.handleButton('blue-up', false);
				case 83: //s - blue down
					return this.handleButton('blue-down', false);
				case 81: //q - blue left
					return this.handleButton('blue-left', false);
				case 79: //o - orange up
					return this.handleButton('orange-up', false);
				case 76: //l - orange down
					return this.handleButton('orange-down', false);
				case 77: //m - orange right
					return this.handleButton('orange-right', false);
			}
		},

		handleButton: function(name, isDown) {
			var index = this.pressedButtons.indexOf(name);
			if(isDown) {
				if(index === -1) {
					this.pressedButtons.push(name);
					if(this.record) {
						if(!this.recordedKeys[this.roundedTime]) {
							this.recordedKeys[this.roundedTime] = [];
						}
						this.recordedKeys[this.roundedTime].push({name: name});
					}
					//is it on the right time?
					var min = this.round(this.roundedTime - this.tolerance, 1);
					var max = this.round(this.roundedTime + this.tolerance, 1);
					for(var i = min; i < max; i+= 0.1) {
						var note = this.getNoteByTimeAndName(i, name);
						if(note) {
							this.handleCorrectButtonPress(i, name);
							break;
						}
					}
				}
			} else {
				if(index !== -1) {
					this.pressedButtons.splice(index, 1);
				}
			}
		},

		getNoteByTimeAndName: function(time, name) {
			time = this.round(time, 1);
			if(this.notesByTime[time]) {
				for (var i = this.notesByTime[time].length - 1; i >= 0; i--) {
					if(this.notesByTime[time][i].name === name) {
						return this.notesByTime[time][i];
					}
				}
			}
			return false;
		},

		handleCorrectButtonPress: function(time, name) {
			//flag it as correct
			var note = this.getNoteByTimeAndName(time, name);
			note.correct = true;
		},

		resizeHandler: function() {
			//resize the canvas
			var w = this.canvas.width = window.innerWidth;
			var h = this.canvas.height = window.innerHeight;

			var hc = w / 2;
			var vc = h / 2;

			this.pixelsPerSecond = this.speed * this.fps;
			this.timeToReachTarget = this.round(vc / this.pixelsPerSecond, 1);

			if(this.loader.loaded) {
				this.transparentBlueLeftButton.sprite.y = this.transparentBlueUpButton.sprite.y = this.transparentBlueDownButton.sprite.y = this.transparentOrangeRightButton.sprite.y = this.transparentOrangeUpButton.sprite.y = this.transparentOrangeDownButton.sprite.y = vc;

				this.transparentBlueLeftButton.sprite.x = this.blueLeftContainer.x = hc - 500;
				this.transparentBlueUpButton.sprite.x = this.blueUpContainer.x = hc - 350;
				this.transparentBlueDownButton.sprite.x = this.blueDownContainer.x = hc - 200;

				this.transparentOrangeDownButton.sprite.x = this.orangeDownContainer.x = hc + 200;
				this.transparentOrangeUpButton.sprite.x = this.orangeUpContainer.x = hc + 350;
				this.transparentOrangeRightButton.sprite.x = this.orangeRightContainer.x = hc + 500;

				this.scoreBar.display.x = hc - 261;
				this.scoreBar.display.y = 100;
			}
		}
	});

	return DancePadGame;

})();
},{"../ContentBase":6,"./DanceGameButton":7,"./ScoreBar":8,"Constants":"kLUUT7"}],"classes/content/dance-pad-game":[function(require,module,exports){
module.exports=require('iZRQ8v');
},{}],11:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');

	var GameCharacter = Class.extend({
		
		speedX: 0,
		speedY: 0,
		minX: 0,
		minY: 0,
		maxX: 0,
		maxY: 0,
		finalX: 0,
		finalY: 0,
		jumping: false,
		finalReached: false,
		state: false,

		init: function(spriteSheet) {
			this.sprite = new createjs.Sprite(spriteSheet);
			this.sprite.framerate = 12;
		},

		setSpeedX: function(value) {
			value = Math.max(0, Math.min(1, value));
			this.speedX = value;
		},

		jump: function(amount) {
			if(!this.jumping) {
				this.jumping = true;
				if(!amount) {
					amount = 14;
				}
				this.speedY = -amount;
			}
		},

		setState: function(value) {
			if(value !== this.state) {
				this.state = value;
				switch(this.state) {
					case "jumping":
						this.sprite.gotoAndStop("jump");
						break;
					case "running":
						this.sprite.gotoAndPlay("run");
						break;
					default:
						this.sprite.gotoAndStop("run");
						break;
				}
			}
		},

		setCorrectState: function() {
			if(this.jumping) {
				this.setState("jumping");
			} else {
				if(this.speedX > 0) {
					this.setState("running");
				} else {
					this.setState("standing");
				}
			}
		},

		update: function() {
			var targetX = this.sprite.x + (this.speedX * 4);
			var targetY = this.sprite.y + this.speedY;

			this.speedY += 1;
			if(targetY > this.maxY) {
				this.speedY = 0;
				if(this.jumping) {
					this.jumping = false;

				}
			}

			this.setCorrectState();

			this.sprite.x = Math.round(Math.min(this.maxX, Math.max(this.minX, targetX)));
			this.sprite.y = Math.round(Math.min(this.maxY, Math.max(this.minY, targetY)));
		}
	});

	return GameCharacter;

})();
},{"core/Class":"Hzu0go"}],"oqTQ3e":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');
	var GameCharacter = require('./GameCharacter');
	var HeartRateCanvas = require('../../HeartRateCanvas');

	var HighestHeartrateGame = ContentBase.extend({
		winner: false,
		flagDropped: false,
		sparkIdMap: {},
		minHeartRate: 60,
		maxHeartRate: 200,
		init: function(name) {
			this._super(name);
			console.log("[HighestHeartrateGame] init");

			this._setSubstateHandler = $.proxy(this.setSubstateHandler, this);
			this._heartRateSparkHandler = $.proxy(this.heartRateSparkHandler, this);

			this.socket.on(Constants.SET_SUBSTATE, this._setSubstateHandler);
			this.socket.on(Constants.HEART_RATE_SPARK, this._heartRateSparkHandler);

			$('.substate-intro .btn').on('click', $.proxy(this.startClickHandler, this));

			//heart rate canvas
			this.peachCanvas = new HeartRateCanvas(document.getElementById('peach'));
			this.marioCanvas = new HeartRateCanvas(document.getElementById('mario'));

			//game canvas
			this.canvas = document.getElementById('game');
			this.stage = new createjs.Stage(this.canvas);

			this.backgroundFill = new createjs.Shape();
			this.stage.addChild(this.backgroundFill);

			var manifest = [
				{ src: "images/mario/mario-spritesheet.png", id: "characters" },
				{ src: "images/mario/ground.png", id: "ground" },
				{ src: "images/mario/hills.png", id: "hills" },
				{ src: "images/mario/flagpole.png", id: "flagpole" },
				{ src: "images/mario/flag-spritesheet.png", id: "flag" }
			];
			this.loader = new createjs.LoadQueue(false);
			this.loader.addEventListener("complete", $.proxy(this.loadCompleteHandler, this));
			this.loader.loadManifest(manifest);

			createjs.Ticker.setFPS(60);
			createjs.Ticker.addEventListener("tick", this.stage);

			this.showCurrentState();
			$(window).on('resize', $.proxy(this.resizeHandler, this));
			this.resizeHandler();

			//fake control of characters
			$(window).on('keydown', $.proxy(this.keydownHandler, this));
		},

		loadCompleteHandler: function() {

			this.hillsImage = this.loader.getResult("hills");
			this.hills = new createjs.Shape();
			this.hills.tileW = this.hillsImage.width;

			this.groundImage = this.loader.getResult("ground");
			this.ground = new createjs.Shape();
			this.ground.tileW = this.groundImage.width;

			this.flagpole = new createjs.Bitmap(this.loader.getResult("flagpole"));

			this.flag = new createjs.Sprite(new createjs.SpriteSheet(
				{
					images: [this.loader.getResult("flag")], 
					frames:[
						[0, 0, 32, 32, 0, 0, 0],
						[32, 0, 32, 32, 0, 0, 0],
						[0, 32, 32, 32, 0, 0, 0],
					],
					animations: {
						moving:{ frames:[0, 1, 2, ], frequency:4, next:true},
					}
				}
			), "moving");
			this.flag.framerate = 8;

			this.peach = new GameCharacter(new createjs.SpriteSheet(
			{
				images: [this.loader.getResult("characters")],
				frames:[
					[0, 0, 32, 64, 0, 0, 0],
					[32, 0, 32, 64, 0, 0, 0],
					[64, 0, 32, 64, 0, 0, 0],
					[96, 0, 32, 64, 0, 0, 0],
					[0, 64, 32, 64, 0, 0, 0],],
					animations: {
					run:{ frames:[0, 1, 2, 3, ], frequency:4, next:true},
					jump:{ frames:[4, ], frequency:4, next:true},}
			}));
			this.peach.name = "peach";

			this.mario = new GameCharacter(new createjs.SpriteSheet(
			{
				images: [this.loader.getResult("characters")],
				frames:[
					[32, 64, 32, 64, 0, 0, 0],
					[64, 64, 32, 64, 0, 0, 0],
					[96, 64, 32, 64, 0, 0, 0],
					[0, 128, 32, 64, 0, 0, 0],
					[32, 128, 32, 64, 0, 0, 0],],
					animations: {
					run:{ frames:[0, 1, 2, 3, ], frequency:4, next:true},
					jump:{ frames:[4, ], frequency:4, next:true},}
			}));
			this.mario.name = "mario";

			this.resetGame();

			this.stage.addChild(this.hills, this.ground, this.flagpole, this.flag, this.mario.sprite, this.peach.sprite);
			this.resizeHandler();
		},

		setSubstateHandler: function(substate) {
			if(this.substate !== substate) {
				this.substate = substate;
				this.showCurrentState();
			}
		},

		heartRateSparkHandler: function(id, heartRate) {
			heartRate = parseInt(heartRate);
			if(this.peach) {
				//assets are ready
				if(!this.sparkIdMap[id]) {
					if(!this.peach.sparkId) {
						this.sparkIdMap[id] = {
							character: this.peach,
							heartRateCanvas: this.peachCanvas,
							$col: $('.col-peach')
						};
						this.peach.sparkId = id;
					} else if(!this.mario.sparkId) {
						this.sparkIdMap[id] = {
							character: this.mario,
							heartRateCanvas: this.marioCanvas,
							$col: $('.col-mario')
						};
						this.mario.sparkId = id;
					}
				}
				if(this.sparkIdMap[id]) {
					//update canvas
					this.sparkIdMap[id].heartRateCanvas.updateHeartRate(heartRate);
					//update text
					this.sparkIdMap[id].$col.find('.heartRate').text(heartRate);
					//update character speed
					if(this.substate === Constants.HIGHEST_HEARTRATE_GAME_GAME && !this.winner) {
						var targetSpeed = Math.min(1, Math.max(0, this.map(heartRate, this.minHeartRate, this.maxHeartRate, 0, 1)));
						this.sparkIdMap[id].character.setSpeedX(targetSpeed);
					}
				}
			}
		},

		map: function(value, istart, istop, ostart, ostop) {
    		return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
  		},

		startClickHandler: function() {
			this.socket.emit(Constants.SET_SUBSTATE, Constants.HIGHEST_HEARTRATE_GAME_GAME);
		},

		showCurrentState: function() {
			$('.substate').removeClass('active');
			if(this.substate === Constants.HIGHEST_HEARTRATE_GAME_GAME) {
				this.resetGame();
				$('.substate-game').addClass('active');
			} else if(this.substate === Constants.HIGHEST_HEARTRATE_GAME_FINISHED) {
				$('.substate-finished').addClass('active');
			} else {
				$('.substate-intro').addClass('active');
			}
		},

		resetGame: function() {
			this.winner = false;
			this.flagDropped = false;
			if(this.peach) {
				this.peach.setSpeedX(0);
				this.mario.setSpeedX(0);

				this.peach.sprite.x = 50;
				this.mario.sprite.x = 10;

				this.flag.y = this.flagpole.y + 16;
				this.flag.gotoAndPlay("moving");
			}
		},

		drawLoop: function() {
			if(this.peach) {
				this.peach.update();
				this.mario.update();
				if(!this.winner) {
					if(this.peach.sprite.x >= this.peach.finalX) {
						this.setWinner(this.peach);
					} else if(this.mario.sprite.x >= this.mario.finalX) {
						this.setWinner(this.mario);
					}
				} else {
					//stop the non-winner
					if(this.winner === this.mario) {
						this.peach.setSpeedX(0);
					} else {
						this.mario.setSpeedX(0);
					}
					//drop flag?
					if(!this.flagDropped && this.winner.sprite.x >= this.flagpole.x) {
						this.flagDropped = true;
						this.flag.gotoAndStop("moving");
						this.winner.setSpeedX(0);
					}
					if(this.flagDropped) {
						//follow the winner down
						this.flag.y = this.winner.sprite.y;
					}
				}
			}
		},

		setWinner: function(winner) {
			this.winner = winner;
			this.winner.setSpeedX(1);
			this.winner.jump(22);
			this.winner.finalReached = true;
			$('.substate-finished .winner').text(this.winner.name + " wins!");
			this.socket.emit(Constants.SET_SUBSTATE, Constants.HIGHEST_HEARTRATE_GAME_FINISHED);
		},

		keydownHandler: function(event) {
			if(!this.winner) {
				switch(event.keyCode) {
					case 65: //a
						this.peach.setSpeedX(0.5);
						break;
					case 90: //z
						this.mario.setSpeedX(0.5);
						break;
					default:
						this.peach.setSpeedX(0);
						this.mario.setSpeedX(0);
						break;
				}
			}
		},

		resizeHandler: function() {
			//resize the canvas
			var w = this.canvas.width = window.innerWidth;
			var h = this.canvas.height = window.innerHeight;

			this.backgroundFill.graphics.beginFill('#5088a0').drawRect(0, 0, w, h).endFill();

			if(this.loader.loaded) {
				this.hills.graphics.clear();
				this.hills.graphics.beginBitmapFill(this.hillsImage).drawRect(0, 0, w+this.hillsImage.width, this.hillsImage.height);
				this.hills.y = h-this.hillsImage.height-this.groundImage.height;

				this.ground.graphics.clear();
				this.ground.graphics.beginBitmapFill(this.groundImage).drawRect(0, 0, w+this.groundImage.width, this.groundImage.height);
				this.ground.y = h-this.groundImage.height;

				this.flagpole.x = w - 100;
				this.flagpole.y = this.ground.y - this.flagpole.getBounds().height;

				this.peach.minX = this.mario.minX = 0;
				this.peach.maxX = this.mario.maxX = w - 50;

				this.peach.maxY = this.ground.y - this.peach.sprite.getBounds().height;
				this.mario.maxY = this.ground.y - this.mario.sprite.getBounds().height;

				this.peach.finalX = this.mario.finalX = this.flagpole.x - 100;

				this.flag.x = this.flagpole.x + 16;
				if(this.winner && this.flagDropped) {
					this.flag.y = this.winner.y;
				} else {
					this.flag.y = this.flagpole.y + 16;
				}
			}
		}
	});

	return HighestHeartrateGame;

})();
},{"../../HeartRateCanvas":3,"../ContentBase":6,"./GameCharacter":11,"Constants":"kLUUT7"}],"classes/content/highest-heartrate-game":[function(require,module,exports){
module.exports=require('oqTQ3e');
},{}],"MlY+Zr":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');
	var HeartRateCanvas = require('../../HeartRateCanvas');

	var IntroPoster = ContentBase.extend({
		init: function(name) {
			this._super(name);
			console.log("[IntroPoster] init");

			this.heartRateCanvas = new HeartRateCanvas(document.getElementById('polarHeartRateCanvas'));
			this.heartRateCanvas.showHeartRateTextInBackground = true;
			this.heartRateCanvas.updateHeartRate(60);//default 60 bpm
			this.resizeHeartRateCanvas();

			this._heartRateHandler = $.proxy(this.heartRateHandler, this);
			this._socketConnectHandler = $.proxy(this.socketConnectHandler, this);

			this.socket.on('heartRate', this._heartRateHandler);
			this.socket.on('connect', this._socketConnectHandler);
			this.socket.on(Constants.HEART_RATE_POLAR, $.proxy(this.heartRatePolarHandler, this));

			$(window).on('resize', $.proxy(this.resizeHandler, this));
		},

		socketConnectHandler: function() {
			console.log("[IntroPoster] socket connect");
			this.socket.emit('requestPolarH7');
		},

		heartRatePolarHandler: function(heartRate) {
			this.heartRateCanvas.updateHeartRate(heartRate);
			$('.background.heartrate').text(heartRate);
		},

		resizeHandler: function() {
			this.resizeHeartRateCanvas();
		},

		resizeHeartRateCanvas: function() {
			this.heartRateCanvas.resize(window.innerWidth, window.innerHeight / 2);
		}
	});

	return IntroPoster;

})();
},{"../../HeartRateCanvas":3,"../ContentBase":6,"Constants":"kLUUT7"}],"classes/content/intro-poster":[function(require,module,exports){
module.exports=require('MlY+Zr');
},{}],16:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');

	var GameCharacter = Class.extend({
		
		state: false,
		heartRate: 0,

		init: function(spriteSheet) {
			this.sprite = new createjs.Sprite(spriteSheet);
			this.setState("standing");
		},

		setState: function(value) {
			if(value !== this.state) {
				this.state = value;
				switch(this.state) {
					case "falling":
						this.sprite.framerate = 12;
						this.sprite.gotoAndPlay("falling");
						break;
					case "kameha":
						this.sprite.gotoAndPlay("kameha");
						break;
					default:
						this.sprite.framerate = 6;
						this.sprite.gotoAndPlay("standing");
						break;
				}
			}
		},

		update: function() {
		}
	});

	return GameCharacter;

})();
},{"core/Class":"Hzu0go"}],"Gmk0gN":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');
	var GameCharacter = require('./GameCharacter');
	var HeartRateCanvas = require('../../HeartRateCanvas');

	var LowestHeartrateGame = ContentBase.extend({
		sparkIdMap: {},
		beamPosition: 0.5,
		winner: false,
		init: function(name) {
			this._super(name);
			console.log("[LowestHeartrateGame] init");

			this._setSubstateHandler = $.proxy(this.setSubstateHandler, this);
			this._heartRateSparkHandler = $.proxy(this.heartRateSparkHandler, this);

			this.socket.on(Constants.SET_SUBSTATE, this._setSubstateHandler);
			this.socket.on(Constants.HEART_RATE_SPARK, this._heartRateSparkHandler);

			$('.substate-intro .btn').on('click', $.proxy(this.startClickHandler, this));

			//heart rate canvas
			this.gokuCanvas = new HeartRateCanvas(document.getElementById('goku'));
			this.gohanCanvas = new HeartRateCanvas(document.getElementById('gohan'));

			//game canvas
			this.canvas = document.getElementById('game');
			this.stage = new createjs.Stage(this.canvas);

			this.backgroundFill = new createjs.Shape();
			this.stage.addChild(this.backgroundFill);

			var manifest = [
				{ src: "images/dragonball/dragonball-spritesheet.png", id: "characters" },
				{ src: "images/dragonball/beam.png", id: "beam" },
				{ src: "images/dragonball/background.png", id: "background" },
				{ src: "images/dragonball/floor.png", id: "floor" }
			];
			this.loader = new createjs.LoadQueue(false);
			this.loader.addEventListener("complete", $.proxy(this.loadCompleteHandler, this));
			this.loader.loadManifest(manifest);

			createjs.Ticker.setFPS(60);
			createjs.Ticker.addEventListener("tick", this.stage);

			this.showCurrentState();
			$(window).on('resize', $.proxy(this.resizeHandler, this));
			this.resizeHandler();

			//fake control
			//$(window).on('mousemove', $.proxy(this.mousemoveHandler, this));
		},

		loadCompleteHandler: function() {

			this.backgroundImage = new createjs.Bitmap(this.loader.getResult("background"));
			this.floorImage = new createjs.Bitmap(this.loader.getResult("floor"));

			this.goku = new GameCharacter(new createjs.SpriteSheet(
			{
				images: [this.loader.getResult("characters")],
				frames:[
					[364, 364, 182, 182, 0, 0, 0],
					[546, 364, 182, 182, 0, 0, 0],
					[728, 364, 182, 182, 0, 0, 0],
					[0, 546, 182, 182, 0, 0, 0],
					[182, 546, 182, 182, 0, 0, 0],
					[364, 546, 182, 182, 0, 0, 0],
					[546, 546, 182, 182, 0, 0, 0],
					[728, 546, 182, 182, 0, 0, 0],
					[0, 728, 182, 182, 0, 0, 0],
					[182, 728, 182, 182, 0, 0, 0],],
					animations: {
					falling:{ frames:[0, 1, 2, 3, 4, 5, 6, ], frequency:4, next:false},
					kameha:{ frames:[7, ], frequency:4, next:true},
					standing:{ frames:[8, 9, ], frequency:4, next:true},}
			}));
			this.goku.name = "goku";

			this.gohan = new GameCharacter(new createjs.SpriteSheet(
			{
				images: [this.loader.getResult("characters")],
				frames:[
					[364, 0, 182, 182, 0, 0, 0],
					[546, 0, 182, 182, 0, 0, 0],
					[728, 0, 182, 182, 0, 0, 0],
					[0, 182, 182, 182, 0, 0, 0],
					[182, 182, 182, 182, 0, 0, 0],
					[364, 182, 182, 182, 0, 0, 0],
					[546, 182, 182, 182, 0, 0, 0],
					[728, 182, 182, 182, 0, 0, 0],
					[0, 364, 182, 182, 0, 0, 0],
					[182, 364, 182, 182, 0, 0, 0],],
					animations: {
					falling:{ frames:[0, 1, 2, 3, 4, 5, 6, ], frequency:4, next:false},
					kameha:{ frames:[7, ], frequency:4, next:true},
					standing:{ frames:[8, 9, ], frequency:4, next:true},}
			}));
			this.gohan.sprite.scaleX = -1;
			this.gohan.name = "gohan";

			this.beamImage = this.loader.getResult("beam");

			this.gokuBeam = new createjs.Shape();
			this.gokuBeam.regY = this.beamImage.height / 2;
			this.gokuBeam.tileW = this.beamImage.width;

			this.gohanBeam = new createjs.Shape();
			this.gohanBeam.regY = this.beamImage.height / 2;
			this.gohanBeam.tileW = this.beamImage.width;

			this.gokuBeamEnd = new createjs.Sprite(new createjs.SpriteSheet({
				images: [this.loader.getResult("characters")],
				frames:[
					[0, 0, 182, 182, 0, 0, 0],
					[182, 0, 182, 182, 0, 0, 0],],
					animations: {
					beaming:{ frames:[0, 1, ], frequency:4, next:true},}
			}), "beaming");
			this.gokuBeamEnd.regX = this.gokuBeamEnd.getBounds().width / 2 - 20;
			this.gokuBeamEnd.regY = this.gokuBeamEnd.getBounds().height / 2;
			this.gokuBeamEnd.scaleX = -1;
			this.gokuBeamEnd.framerate = 10;

			this.gohanBeamEnd = new createjs.Sprite(new createjs.SpriteSheet({
				images: [this.loader.getResult("characters")],
				frames:[
					[0, 0, 182, 182, 0, 0, 0],
					[182, 0, 182, 182, 0, 0, 0],],
					animations: {
					beaming:{ frames:[0, 1, ], frequency:4, next:true},}
			}), "beaming");
			this.gohanBeamEnd.regX = this.gohanBeamEnd.getBounds().width / 2 - 20;
			this.gohanBeamEnd.regY = this.gohanBeamEnd.getBounds().height / 2;
			this.gohanBeamEnd.framerate = 10;

			this.resizeHandler();
			this.resetGame();

			this.stage.addChild(this.backgroundImage, this.floorImage, this.gohan.sprite, this.goku.sprite, this.gokuBeam, this.gohanBeam, this.gokuBeamEnd, this.gohanBeamEnd);
		},

		setSubstateHandler: function(substate) {
			if(this.substate !== substate) {
				this.substate = substate;
				this.showCurrentState();
			}
		},

		heartRateSparkHandler: function(id, heartRate) {
			heartRate = parseInt(heartRate);
			if(this.goku) {
				//assets are ready
				if(!this.sparkIdMap[id]) {
					if(!this.goku.sparkId) {
						this.sparkIdMap[id] = {
							character: this.goku,
							heartRateCanvas: this.gokuCanvas,
							$col: $('.col-goku')
						};
						this.goku.sparkId = id;
					} else if(!this.gohan.sparkId) {
						this.sparkIdMap[id] = {
							character: this.gohan,
							heartRateCanvas: this.gohanCanvas,
							$col: $('.col-gohan')
						};
						this.gohan.sparkId = id;
					}
				}
				if(this.sparkIdMap[id]) {
					//update canvas
					this.sparkIdMap[id].heartRateCanvas.updateHeartRate(heartRate);
					//update text
					this.sparkIdMap[id].$col.find('.heartRate').text(heartRate);
					//update heart rate
					this.sparkIdMap[id].character.heartRate = heartRate;
				}
			}
		},

		map: function(value, istart, istop, ostart, ostop) {
    		return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
  		},

		startClickHandler: function() {
			this.socket.emit(Constants.SET_SUBSTATE, Constants.LOWEST_HEARTRATE_GAME_GAME);
		},

		showCurrentState: function() {
			$('.substate').removeClass('active');
			if(this.substate === Constants.LOWEST_HEARTRATE_GAME_GAME) {
				this.resetGame();
				$('.substate-game').addClass('active');
			} else if(this.substate === Constants.LOWEST_HEARTRATE_GAME_FINISHED) {
				$('.substate-finished').addClass('active');
			} else {
				$('.substate-intro').addClass('active');
			}
		},

		resetGame: function() {
			this.beamPosition = 0.5;
			this.gokuAbsoluteBeamPosition = this.minBeamEndX;
			this.gohanAbsoluteBeamPosition = this.maxBeamEndX;
			this.winner = false;
		},

		drawLoop: function() {
			if(this.goku) {
				this.goku.update();
				this.gohan.update();

				//update beamPosition according to heart rates
				if(this.goku.heartRate > 0 && this.gohan.heartRate > 0) {
					var heartRateDiff = this.gohan.heartRate - this.goku.heartRate;
					var newBeamPosition = this.beamPosition + (heartRateDiff * 0.0001);
					this.setBeamPosition(newBeamPosition);
				}

				var targetBeamPosition = this.minBeamEndX + this.beamPosition * this.availableBeamWidth;

				this.gokuAbsoluteBeamPosition += (targetBeamPosition - this.gokuAbsoluteBeamPosition) * 0.2;
				this.gohanAbsoluteBeamPosition += (targetBeamPosition - this.gohanAbsoluteBeamPosition) * 0.2;

				//position the beam ends
				this.gokuBeamEnd.x = this.gokuAbsoluteBeamPosition;
				this.gohanBeamEnd.x = this.gohanAbsoluteBeamPosition;

				//redraw the beams
				this.gokuBeam.x = this.minBeamEndX - 30;
				this.gokuBeam.graphics.clear();
				this.gokuBeam.graphics.beginBitmapFill(this.beamImage).drawRect(0, 0, this.gokuAbsoluteBeamPosition + 20 - this.minBeamEndX, this.beamImage.height);

				this.gohanBeam.x = this.gohanAbsoluteBeamPosition + 10;
				this.gohanBeam.graphics.clear();
				this.gohanBeam.graphics.beginBitmapFill(this.beamImage).drawRect(0, 0, this.maxBeamEndX - this.gohanAbsoluteBeamPosition + 16, this.beamImage.height);

				this.gokuBeam.visible = this.gohanBeam.visible = this.gokuBeamEnd.visible = this.gohanBeamEnd.visible = (this.substate === Constants.LOWEST_HEARTRATE_GAME_GAME);

				if(!this.winner) {
					if(this.substate === Constants.LOWEST_HEARTRATE_GAME_GAME) {
						this.goku.setState('kameha');
						this.gohan.setState('kameha');
						if(this.beamPosition < 0.05) {
							this.setWinner(this.gohan);
						} else if(this.beamPosition > 0.95) {
							this.setWinner(this.goku);
						}
					} else {
						this.goku.setState('standing');
						this.gohan.setState('standing');
					}
				} else {
					if(this.substate !== Constants.LOWEST_HEARTRATE_GAME_GAME) {
						this.winner.setState('standing');
					}
					if(this.winner === this.goku) {
						this.gohan.setState('falling');
					} else {
						this.goku.setState('falling');
					}
				}
			}
		},

		setWinner: function(winner) {
			this.winner = winner;
			if(this.winner === this.gohan) {
				this.beamPosition = -1;
			} else {
				this.beamPosition = 2;
			}
			$('.substate-finished .winner').text(this.winner.name + " wins!");
			//timeout to change state
			setTimeout($.proxy(this.socket.emit, this.socket, Constants.SET_SUBSTATE, Constants.LOWEST_HEARTRATE_GAME_FINISHED), 500);
		},

		resizeHandler: function() {
			//resize the canvas
			var w = this.canvas.width = window.innerWidth;
			var h = this.canvas.height = window.innerHeight;

			this.minBeamEndX = 270;
			this.maxBeamEndX = w - 270;
			this.availableBeamWidth = this.maxBeamEndX - this.minBeamEndX;

			this.backgroundFill.graphics.beginFill('#d87040').drawRect(0, 0, w, h).endFill();

			if(this.goku) {
				this.backgroundImage.x = Math.round(w - this.backgroundImage.getBounds().width) / 2;
				this.backgroundImage.y = h - this.backgroundImage.getBounds().height - 100;

				this.floorImage.x = Math.round(w - this.floorImage.getBounds().width) / 2;
				this.floorImage.y = this.backgroundImage.y + this.backgroundImage.getBounds().height;

				this.goku.sprite.x = 100;
				this.goku.sprite.y = h - this.goku.sprite.getBounds().height;

				this.gohan.sprite.x = w - 100;
				this.gohan.sprite.y = h - this.gohan.sprite.getBounds().height;

				//beams
				this.gokuBeamEnd.y = this.gohanBeamEnd.y = h - 120;
				this.gokuBeam.y = this.gohanBeam.y = this.gokuBeamEnd.y;
			}
		},

		setBeamPosition: function(value) {
			value = Math.max(0, Math.min(1, value));
			if(value !== this.beamPosition) {
				this.beamPosition = value;
			}
		},

		/**
		 * test with mouse instead of heartrates
		 */
		mousemoveHandler: function(event) {
			if(!this.winner) {
				this.setBeamPosition(event.clientX / this.canvas.width);
			}
		}
	});

	return LowestHeartrateGame;

})();
},{"../../HeartRateCanvas":3,"../ContentBase":6,"./GameCharacter":16,"Constants":"kLUUT7"}],"classes/content/lowest-heartrate-game":[function(require,module,exports){
module.exports=require('Gmk0gN');
},{}],"classes/content/node-app-editor":[function(require,module,exports){
module.exports=require('SXh0p5');
},{}],"SXh0p5":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');

	var NodeAppEditor = ContentBase.extend({
		init: function(name) {
			this._super(name);
			this.slideControlEnabled = false;
			console.log("[NodeAppEditor] init");

			this.codeMirror = CodeMirror.fromTextArea(document.getElementById('code'), {
				lineNumbers: true,
				mode: "javascript",
				extraKeys: {"Ctrl-Space": "autocomplete"}
		    });

		    $('.btn').on('click', $.proxy(this.runClickHandler, this));
		},

		runClickHandler: function() {
			//send the content to nodejs to save
			var code = this.codeMirror.getValue();
			this.socket.emit(Constants.CHILD_APP_SAVE_CODE, {code: code, type: 'node'});
			//open the command line

			parent.$('body').trigger(Constants.OPEN_COMMAND_LINE);
		}
	});

	return NodeAppEditor;

})();
},{"../ContentBase":6,"Constants":"kLUUT7"}],"sgWrnX":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');

	var ReactPhones = ContentBase.extend({
		gameDuration: 10, //game lasts 30 seconds
		init: function(name) {
			this._super(name);
			console.log("[ReactPhones] init");

			this.clientsMap = {};

			this._setSubstateHandler = $.proxy(this.setSubstateHandler, this);

			this.socket.on(Constants.SET_SUBSTATE, this._setSubstateHandler);

			this.socket.on(Constants.REACT_PHONES_CLIENT_ADDED, $.proxy(this.clientAddedHandler, this));
			this.socket.on(Constants.REACT_PHONES_CLIENT_REMOVED, $.proxy(this.clientRemovedHandler, this));
			this.socket.on(Constants.REACT_PHONES_CLIENT_UPDATE, $.proxy(this.clientUpdateHandler, this));
			this.socket.on(Constants.REACT_PHONES_CLIENT_LIST, $.proxy(this.clientListHandler, this));

			$('.substate-intro .btn').on('click', $.proxy(this.startClickHandler, this));
			$('.substate-finished .btn').on('click', $.proxy(this.winnerClickHandler, this));

			this.showCurrentState();
		},

		setServerInfo: function(ip, port) {
			this._super(ip, port);
			$('#ip').text('http://' + ip);
		},

		setSubstateHandler: function(substate) {
			if(this.substate !== substate) {
				this.substate = substate;
				this.showCurrentState();
			}
		},

		startClickHandler: function() {
			this.socket.emit(Constants.SET_SUBSTATE, Constants.REACT_PHONES_GAME);
		},

		winnerClickHandler: function() {
			this.socket.emit(Constants.SELECT_WINNER);
		},

		clientAddedHandler: function(clientInfo) {
			console.log('[ReactPhones] client added', clientInfo);
			this.clientsMap[clientInfo.id] = clientInfo;
			this.clientsMap[clientInfo.id].size = 10;
			this.clientsMap[clientInfo.id].$div = $('<div class="circle">').css({
				position: 'absolute',
				left: Math.random() * 100 + '%',
				top: Math.random() * 100 + '%',
				backgroundColor: 'rgba(' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ', 0.5)',
				width: '10px',
				height: '10px'
			});
			$('.background .substate-game').append(this.clientsMap[clientInfo.id].$div);
			this.numClientsChanged();
		},

		clientRemovedHandler: function(clientInfo) {
			console.log('[ReactPhones] client removed', clientInfo);
			this.clientsMap[clientInfo.id].$div.remove();
			delete this.clientsMap[clientInfo.id];
			this.numClientsChanged();
		},

		clientUpdateHandler: function(clientInfo) {
			//console.log('[ReactPhones] client update', clientInfo);
			$.extend(this.clientsMap[clientInfo.id], clientInfo);
		},

		clientListHandler: function(list) {
			console.log('[ReactPhones] client list', list);
			this.clientsMap = {};
			$('.background .substate-game').html('');
			for (var i = list.length - 1; i >= 0; i--) {
				this.clientsMap[list[i].id] = list[i];
				this.clientsMap[list[i].id].size = 10;
				this.clientsMap[list[i].id].$div = $('<div class="circle">').css({
					position: 'absolute',
					left: Math.random() * 100 + '%',
					top: Math.random() * 100 + '%',
					backgroundColor: 'rgba(' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ', 0.5)',
					width: '10px',
					height: '10px'
				});
				$('.background .substate-game').append(this.clientsMap[list[i].id].$div);
			}
			this.numClientsChanged();
		},

		numClientsChanged: function() {
			var numClients = 0;
			$.each(this.clientsMap, function(key, value){
				numClients++;
			});
			$('#connections span').text(numClients);
		},

		showCurrentState: function() {
			$('.substate').removeClass('active');
			$('body').css({
				backgroundImage: 'none'
			});
			if(this.substate === Constants.REACT_PHONES_GAME) {
				$('.substate-game .countdown').html(this.gameDuration);
				$('.substate-game').addClass('active');
				this.countDownTimeout = setTimeout($.proxy(this.countDownHandler, this, this.gameDuration - 1), 1000);
			} else if(this.substate === Constants.REACT_PHONES_FINISHED) {
				$('.substate-finished').addClass('active');
			} else {
				$('body').css({
					backgroundRepeat: 'no-repeat',
					backgroundSize: 'contain',
					backgroundPosition: 'center center',
					backgroundImage: 'url(images/iphone-connections.png)'
				});
				$('.substate-intro').addClass('active');
			}
		},

		countDownHandler: function(timeLeft) {
			$('.substate-game .countdown').html(timeLeft);
			if(timeLeft > 0) {
				this.countDownTimeout = setTimeout($.proxy(this.countDownHandler, this, timeLeft - 1), 1000);
			} else {
				this.socket.emit(Constants.SET_SUBSTATE, Constants.REACT_PHONES_FINISHED);
			}
		},

		drawLoop: function() {
			if(this.substate === Constants.REACT_PHONES_GAME) {
				/*
				$.each(this.clientsMap, function(key, value){
					var target = 3 * Math.max(10, value.maximumMotion);
					value.size += (target - value.size) * 0.2;
					value.$div.css({
						width: value.size + 'px',
						height: value.size + 'px'
					});
				});
				*/
			}
		},
	});

	return ReactPhones;

})();
},{"../ContentBase":6,"Constants":"kLUUT7"}],"classes/content/react-phones":[function(require,module,exports){
module.exports=require('sgWrnX');
},{}],"classes/content/shake-your-phones":[function(require,module,exports){
module.exports=require('oLqZeW');
},{}],"oLqZeW":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');

	var ShakeYourPhones = ContentBase.extend({
		gameDuration: 10, //game lasts 30 seconds
		init: function(name) {
			this._super(name);
			console.log("[ShakeYourPhones] init");

			this.clientsMap = {};

			this._setSubstateHandler = $.proxy(this.setSubstateHandler, this);

			this.socket.on(Constants.SET_SUBSTATE, this._setSubstateHandler);

			this.socket.on(Constants.SHAKE_YOUR_PHONES_CLIENT_ADDED, $.proxy(this.clientAddedHandler, this));
			this.socket.on(Constants.SHAKE_YOUR_PHONES_CLIENT_REMOVED, $.proxy(this.clientRemovedHandler, this));
			this.socket.on(Constants.SHAKE_YOUR_PHONES_CLIENT_UPDATE, $.proxy(this.clientUpdateHandler, this));
			this.socket.on(Constants.SHAKE_YOUR_PHONES_CLIENT_LIST, $.proxy(this.clientListHandler, this));

			$('.substate-intro .btn').on('click', $.proxy(this.startClickHandler, this));
			$('.substate-finished .btn').on('click', $.proxy(this.winnerClickHandler, this));

			this.showCurrentState();
		},

		setServerInfo: function(ip, port) {
			this._super(ip, port);
			$('#ip').text('http://' + ip);
		},

		setSubstateHandler: function(substate) {
			if(this.substate !== substate) {
				this.substate = substate;
				this.showCurrentState();
			}
		},

		startClickHandler: function() {
			this.socket.emit(Constants.SET_SUBSTATE, Constants.SHAKE_YOUR_PHONES_GAME);
		},

		winnerClickHandler: function() {
			this.socket.emit(Constants.SELECT_WINNER);
		},

		clientAddedHandler: function(clientInfo) {
			//console.log('[ShakeYourPhones] client added', clientInfo);
			this.clientsMap[clientInfo.id] = clientInfo;
			this.clientsMap[clientInfo.id].size = 10;
			this.clientsMap[clientInfo.id].$div = $('<div class="circle">').css({
				position: 'absolute',
				left: Math.random() * 100 + '%',
				top: Math.random() * 100 + '%',
				backgroundColor: 'rgba(' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ', 0.5)',
				width: '10px',
				height: '10px'
			});
			$('.background .substate-game').append(this.clientsMap[clientInfo.id].$div);
			this.numClientsChanged();
		},

		clientRemovedHandler: function(clientInfo) {
			//console.log('[ShakeYourPhones] client removed', clientInfo);
			this.clientsMap[clientInfo.id].$div.remove();
			delete this.clientsMap[clientInfo.id];
			this.numClientsChanged();
		},

		clientUpdateHandler: function(clientInfo) {
			//console.log('[ShakeYourPhones] client update', clientInfo);
			$.extend(this.clientsMap[clientInfo.id], clientInfo);
		},

		clientListHandler: function(list) {
			console.log('[ShakeYourPhones] client list', list);
			this.clientsMap = {};
			$('.background .substate-game').html('');
			for (var i = list.length - 1; i >= 0; i--) {
				this.clientsMap[list[i].id] = list[i];
				this.clientsMap[list[i].id].size = 10;
				this.clientsMap[list[i].id].$div = $('<div class="circle">').css({
					position: 'absolute',
					left: Math.random() * 100 + '%',
					top: Math.random() * 100 + '%',
					backgroundColor: 'rgba(' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ', 0.5)',
					width: '10px',
					height: '10px'
				});
				$('.background .substate-game').append(this.clientsMap[list[i].id].$div);
			}
			this.numClientsChanged();
		},

		numClientsChanged: function() {
			var numClients = 0;
			$.each(this.clientsMap, function(key, value){
				numClients++;
			});
			$('#connections span').text(numClients);
		},

		showCurrentState: function() {
			$('.substate').removeClass('active');
			$('body').css({
				backgroundImage: 'none'
			});
			if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
				$('.substate-game .countdown').html(this.gameDuration);
				$('.substate-game').addClass('active');
				this.countDownTimeout = setTimeout($.proxy(this.countDownHandler, this, this.gameDuration - 1), 1000);
			} else if(this.substate === Constants.SHAKE_YOUR_PHONES_FINISHED) {
				$('.substate-finished').addClass('active');
			} else {
				$('body').css({
					backgroundRepeat: 'no-repeat',
					backgroundSize: 'contain',
					backgroundPosition: 'center center',
					backgroundImage: 'url(images/iphone-connections.png)'
				});
				$('.substate-intro').addClass('active');
			}
		},

		countDownHandler: function(timeLeft) {
			$('.substate-game .countdown').html(timeLeft);
			if(timeLeft > 0) {
				this.countDownTimeout = setTimeout($.proxy(this.countDownHandler, this, timeLeft - 1), 1000);
			} else {
				this.socket.emit(Constants.SET_SUBSTATE, Constants.SHAKE_YOUR_PHONES_FINISHED);
			}
		},

		drawLoop: function() {
			if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
				$.each(this.clientsMap, function(key, value){
					var target = 3 * Math.max(10, value.maximumMotion);
					value.size += (target - value.size) * 0.2;
					value.$div.css({
						width: value.size + 'px',
						height: value.size + 'px'
					});
				});
			}
		},
	});

	return ShakeYourPhones;

})();
},{"../ContentBase":6,"Constants":"kLUUT7"}],"classes/content/tessel-app-editor":[function(require,module,exports){
module.exports=require('nEzF+Q');
},{}],"nEzF+Q":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');

	var TesselAppEditor = ContentBase.extend({
		init: function(name) {
			this._super(name);
			this.slideControlEnabled = false;
			console.log("[TesselAppEditor] init");

			this.codeMirror = CodeMirror.fromTextArea(document.getElementById('code'), {
				lineNumbers: true,
				mode: "javascript",
				extraKeys: {"Ctrl-Space": "autocomplete"}
		    });

		    $('.btn').on('click', $.proxy(this.runClickHandler, this));
		},

		runClickHandler: function() {
			//send the content to nodejs to save
			var code = this.codeMirror.getValue();
			this.socket.emit(Constants.CHILD_APP_SAVE_CODE, {code: code, type: 'tessel'});
			//open the command line

			parent.$('body').trigger(Constants.OPEN_COMMAND_LINE);
		}
	});

	return TesselAppEditor;

})();
},{"../ContentBase":6,"Constants":"kLUUT7"}],27:[function(require,module,exports){
(function(){

	var presentation;

	function init() {
		if($('#presentation').length > 0) {
			var Presentation = require('./classes/Presentation');
			presentation = new Presentation();
		}
	}

	init();

})();
},{"./classes/Presentation":4}],"Hzu0go":[function(require,module,exports){
/* jshint ignore:start */
/* Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
module.exports = (function(){
	var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;

	// The base Class implementation (does nothing)
	this.Class = function(){};

	// Create a new Class that inherits from this class
	Class.extend = function(prop) {
		var _super = this.prototype;

		// Instantiate a base class (but only create the instance,
		// don't run the init constructor)
		initializing = true;
		var prototype = new this();
		initializing = false;

		// Copy the properties over onto the new prototype
		for (var name in prop) {
			// Check if we're overwriting an existing function
			prototype[name] = typeof prop[name] == "function" &&
				typeof _super[name] == "function" && fnTest.test(prop[name]) ?
				(function(name, fn){
					return function() {
						var tmp = this._super;

						// Add a new ._super() method that is the same method
						// but on the super-class
						this._super = _super[name];

						// The method only need to be bound temporarily, so we
						// remove it when we're done executing
						var ret = fn.apply(this, arguments);
						this._super = tmp;

						return ret;
					};
				})(name, prop[name]) :
				prop[name];
		}

		// The dummy class constructor
		function Class() {
			// All construction is actually done in the init method
			if ( !initializing && this.init )
				this.init.apply(this, arguments);
		}

		// Populate our constructed prototype object
		Class.prototype = prototype;

		// Enforce the constructor to be what we expect
		Class.prototype.constructor = Class;

		// And make this class extendable
		Class.extend = arguments.callee;

		return Class;
	};
	return Class;
})();
/* jshint ignore:end */
},{}],"core/Class":[function(require,module,exports){
module.exports=require('Hzu0go');
},{}]},{},[27])