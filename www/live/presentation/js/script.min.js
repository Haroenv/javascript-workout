require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"kLUUT7":[function(require,module,exports){
module.exports = (function(){
	
	var Constants = {
		GO_TO_PREVIOUS_SLIDE : 'goToPreviousSlide',
		GO_TO_NEXT_SLIDE : 'goToNextSlide',
		SET_CURRENT_SLIDE_INDEX : 'setCurrentSlideIndex',

		ROLE_PRESENTATION : 'presentation',
		ROLE_MOBILE : 'mobile',

		STATE_ACTIVE : 'active',
		STATE_INACTIVE : 'inactive',

		SET_SUBSTATE : 'setSubstate',

		SHAKE_YOUR_PHONES_INTRO : 'shakeYourPhonesIntro',
		SHAKE_YOUR_PHONES_GAME : 'shakeYourPhonesGame',
		SHAKE_YOUR_PHONES_FINISHED : 'shakeYourPhonesFinished',

		SHAKE_YOUR_PHONES_CLIENT_ADDED : 'shakeYourPhonesClientAdded',
		SHAKE_YOUR_PHONES_CLIENT_REMOVED : 'shakeYourPhonesClientRemoved',
		SHAKE_YOUR_PHONES_CLIENT_LIST : 'shakeYourPhonesClientList',
		SHAKE_YOUR_PHONES_CLIENT_UPDATE : 'shakeYourPhonesClientUpdate',

		HIGHEST_HEARTRATE_GAME_INTRO : 'highestHeartrateGameIntro',
		HIGHEST_HEARTRATE_GAME_GAME : 'highestHeartrateGameGame',
		HIGHEST_HEARTRATE_GAME_FINISHED : 'highestHeartrateGameFinished',

		UPDATE_MAXIMUM_MOTION : 'updateMaximumMotion',
		HEART_RATE_POLAR : 'heartRatePolar',
		HEART_RATE_SPARK : 'heartRateSpark',
		SELECT_WINNER : 'selectWinner',
		BLINK : 'blink'
	};

	return Constants;

})();
},{}],"Constants":[function(require,module,exports){
module.exports=require('kLUUT7');
},{}],3:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');

	var HeartRateCanvas = Class.extend({
		pixelsPerBeatAt60BPM: 100,
		frameNr: 0,
		fps: 60,
		numValues: 0,
		numValuesMargin: 9,
		numValuesWithMargin: 9,
		heartRate: 60,
		backgroundColor: '#fff',
		strokeColor: '#00f',
		width: 0,
		height: 0,
		init: function(canvas) {
			this.canvas = canvas;
			this.width = this.canvas.width;
			this.height = this.canvas.height;
			this._initSizeDependedVariables();

			this.heartRateTickInterval = Math.round(this.fps * 60 / this.heartRate);

			this.stage = new createjs.Stage(this.canvas);
			
			this.drawingShape = new createjs.Shape();
			this.stage.addChild(this.drawingShape);

			createjs.Ticker.timingMode = createjs.Ticker.RAF_SYNCHED;
			createjs.Ticker.setFPS(this.fps);
			this._tick = $.proxy(this.tick, this);
			createjs.Ticker.addEventListener("tick", this._tick);
		},
		resize: function(w, h) {
			this.width = this.canvas.width = w;
			this.height = this.canvas.height = h;
			this._initSizeDependedVariables();
		},
		_initSizeDependedVariables: function() {
			this.numValues = Math.round(this.width * 0.80);
			this.numValuesWithMargin = this.numValues + this.numValuesMargin;
			if(!this.values) {
				this.values = [];
			}
			this.values.length = this.numValuesWithMargin;
			this.canvasVerticalCenter = this.height / 2;
		},
		dispose: function() {
			createjs.Ticker.removeEventListener("tick", this._tick);
		},
		tick: function() {
			this.frameNr++;
			this.drawingShape.graphics.clear()
				.beginFill(this.backgroundColor)
				.drawRect(0, 0, this.width, this.height)
				.endFill()
				.beginStroke(this.strokeColor);

			this.drawingShape.graphics.moveTo(0, this.canvasVerticalCenter - (this.canvasVerticalCenter * this.values[0]));
			for(var i = 1; i < this.numValues; i++) {
				this.drawingShape.graphics.lineTo(i, this.canvasVerticalCenter - (this.canvasVerticalCenter * this.values[i]));
			}
			this.drawingShape.graphics.endStroke();

			this.drawingShape.graphics.beginFill(this.strokeColor)
				.drawCircle(this.numValues - 1, this.canvasVerticalCenter - (this.canvasVerticalCenter * this.values[this.numValues - 1]), 2)
				.endFill();

			//does the tick align with a beat?
			if(this.frameNr % this.heartRateTickInterval === 0) {
				this.frameNr = 0;//reset to zero
				var strength = 0.7 + Math.random() * 0.3;
				this.values[this.numValuesWithMargin - this.numValuesMargin - 1] = 0.05 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 0] = 0.1 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 1] = 0.3 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 2] = 1 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 3] = 0 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 4] = -1 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 5] = -0.3 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 6] = -0.1 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 7] = -0.05 * strength;
				this.values[this.numValuesWithMargin - this.numValuesMargin + 8] = 0 * strength;
			}

			this.values.shift();
			this.values.shift();
			this.values.push(Math.random() * 0.05 - 0.1);
			this.values.push(Math.random() * 0.05 - 0.1);

			this.stage.update();
		},
		updateHeartRate: function(heartRate) {
			this.heartRate = heartRate;
			this.heartRateTickInterval = Math.round(this.fps * 60 / this.heartRate);
		},
	});

	return HeartRateCanvas;

})();
},{"core/Class":"Hzu0go"}],4:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');
	var Slide = require('./Slide');
	var Constants = require('Constants');

	var KEYCODE_LEFT = 37;
	var KEYCODE_RIGHT = 39;

	var Presentation = Class.extend({
		currentSlideIndex: 0,
		socket: false,
		iframes: [],
		numIframes: 3,
		slides: [],
		init: function() {
			console.log("[Presentation] init");

			this.createIframes();

			$("#login form").on('submit', $.proxy(this.loginSubmitHandler, this));
			$(window).on('keydown', $.proxy(this.keydownHandler, this));
			$('body').on(Constants.GO_TO_PREVIOUS_SLIDE, $.proxy(this.goToPreviousSlide, this));
			$('body').on(Constants.GO_TO_NEXT_SLIDE, $.proxy(this.goToNextSlide, this));
		},

		createIframes: function() {
			for(var i = 0; i < this.numIframes; i++) {
				var $iframe = $('<iframe class="slide-frame" />');
				this.iframes.push($iframe);
				$('#presentation').append($iframe);
			}
		},

		loginSubmitHandler: function(event) {
			event.preventDefault();
			var that = this;
			$.post('/login', {
				email: $('[name=email]').val(),
				password: $('[name=password]').val()
			}).done(function(result){
				that.slides = [];
				var numSlides = result.slides.length;
				for(var i = 0; i < numSlides; i++) {
					var slide = new Slide(result.slides[i]);
					that.slides.push(slide);
				}
				that.connectSocket(result.token);
			});
		},

		connectSocket: function(token) {
			this.token = token;
			this.socket = io.connect('/', {
				query: 'token=' + token
			});
			this.socket.on('connect', $.proxy(this.socketConnectHandler, this));
			this.socket.on('disconnect', $.proxy(this.socketDisconnectHandler, this));
			this.socket.on('currentSlideIndexChanged', $.proxy(this.currentSlideIndexChangedHandler, this));
			this.socket.on(Constants.HEART_RATE_POLAR, $.proxy(this.heartRatePolarHandler, this));
		},

		socketConnectHandler: function() {
			$('#login').hide();
		},

		socketDisconnectHandler: function() {
			$('#login').show();
		},

		currentSlideIndexChangedHandler: function(currentSlideIndex) {
			currentSlideIndex = parseInt(currentSlideIndex);
			this.currentSlideIndex = currentSlideIndex;
			var currentSlide = this.getSlideByIndex(currentSlideIndex);
			var previousSlide = this.getSlideByIndex(currentSlideIndex - 1);
			var nextSlide = this.getSlideByIndex(currentSlideIndex + 1);
			//
			var currentIframe = this.getIframeForSlide(currentSlide, [previousSlide, nextSlide]);
			if(currentIframe) {
				currentSlide.attachToIframe(currentIframe, "slides/" + currentSlide.name + '.html?token=' + this.token);
				currentSlide.setState(Constants.STATE_ACTIVE);
				$(currentIframe).css('left', 0);
			}
			var previousIframe = this.getIframeForSlide(previousSlide, [currentSlide, nextSlide]);
			if(previousIframe) {
				previousSlide.attachToIframe(previousIframe, "slides/" + previousSlide.name + '.html?token=' + this.token);
				previousSlide.setState(Constants.STATE_INACTIVE);
				$(previousIframe).css('left', '-100%');
			}
			var nextIframe = this.getIframeForSlide(nextSlide, [previousSlide, currentSlide]);
			if(nextIframe) {
				nextSlide.attachToIframe(nextIframe, "slides/" + nextSlide.name + '.html?token=' + this.token);
				nextSlide.setState(Constants.STATE_INACTIVE);
				$(nextIframe).css('left', '100%');
			}
		},

		heartRatePolarHandler: function(heartRate) {
			$('#global-heart-rate').text(heartRate + ' bpm');
		},

		getSlideByIndex: function(index) {
			if(index >= 0 && index < this.slides.length) {
				return this.slides[index];
			}
			return false;
		},

		getIframeForSlide: function(slide, slidesNotToClear) {
			if(slide) {
				var $iframe = $('iframe[name=' + slide.name + ']');
				if($iframe.length > 0) {
					return $iframe[0];
				}
				//get a free iframe
				var slideNamesNotToClear = [];
				$(slidesNotToClear).each(function(index, obj){
					slideNamesNotToClear.push(obj.name);
				});
				var $iframes = $('iframe.slide-frame');
				for (var i = $iframes.length - 1; i >= 0; i--) {
					$iframe = $($iframes[i]);
					var name = $iframe.attr('name');
					if(!name || slideNamesNotToClear.indexOf(name) === -1) {
						return $iframe[0];
					}
				}
			}
			return false;
		},

		keydownHandler: function(event) {
			switch(event.keyCode) {
				case KEYCODE_LEFT:
					this.goToPreviousSlide();
					break;
				case KEYCODE_RIGHT:
					this.goToNextSlide();
					break;
			}
		},

		goToPreviousSlide: function() {
			this.tryToSend(Constants.SET_CURRENT_SLIDE_INDEX, this.currentSlideIndex - 1);
		},

		goToNextSlide: function() {
			this.tryToSend(Constants.SET_CURRENT_SLIDE_INDEX, this.currentSlideIndex + 1);
		},

		tryToSend: function() {
			if(this.socket) {
				this.socket.emit.apply(this.socket, arguments);
			}
		}
	});

	return Presentation;

})();
},{"./Slide":5,"Constants":"kLUUT7","core/Class":"Hzu0go"}],5:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');
	//var Constants = require('Constants');

	var Slide = Class.extend({
		init: function(data) {
			this.data = data;
			this.name = this.data.name;
			this._iframeLoadHandler = $.proxy(this.iframeLoadHandler, this);
		},
		attachToIframe: function(iframe, src) {
			this.iframe = iframe;
			$(iframe).off('load', this._iframeLoadHandler);
			$(iframe).attr('name', this.name);
			if(src !== $(iframe).attr('src')) {
				$(iframe).on('load', this._iframeLoadHandler);
				$(iframe).attr('src', src);
			}
		},
		setState: function(state) {
			this.state = state;
			var w = getIframeWindow(this.iframe);
			if(w && w.setState) {
				w.setState(state);
			}
		},
		iframeLoadHandler: function(event) {
			var w = getIframeWindow(this.iframe);
			if(w) {
				if(w.setState) {
					w.setState(this.state);
				}
			}
		}
	});

	function getIframeWindow(iframe_object) {
		  var doc;

		  if (iframe_object.contentWindow) {
		    return iframe_object.contentWindow;
		  }

		  if (iframe_object.window) {
		    return iframe_object.window;
		  } 

		  if (!doc && iframe_object.contentDocument) {
		    doc = iframe_object.contentDocument;
		  } 

		  if (!doc && iframe_object.document) {
		    doc = iframe_object.document;
		  }

		  if (doc && doc.defaultView) {
		   return doc.defaultView;
		  }

		  if (doc && doc.parentWindow) {
		    return doc.parentWindow;
		  }

		  return undefined;
		}

	return Slide;

})();
},{"core/Class":"Hzu0go"}],6:[function(require,module,exports){
module.exports = (function(){
	var Class = require('core/Class');
	var Constants = require('Constants');

	var KEYCODE_LEFT = 37;
	var KEYCODE_RIGHT = 39;

	var ContentBase = Class.extend({
		fps: 60,
		_animationFrameId: false,
		_currentTime: 0,
		_delta: 0,
		_interval: false,
		_lastTime: new Date().getTime(),
		currentFrame: 0,
		init: function() {
			this.token = $.getUrlVar('token');
			window.setState = $.proxy(this.setState, this);
			$(window).on('keydown', $.proxy(this.keydownHandler, this));
			this.__drawLoop = $.proxy(this._drawLoop, this);
			this._interval = 1000 / this.fps;
		},

		setState: function(state) {
			if(state !== this.state) {
				this.state = state;
				this.onStateChanged();
				if(this.state === Constants.STATE_ACTIVE) {
					this.currentFrame = 0;
					this._drawLoop();
				} else {
					window.cancelAnimationFrame(this._animationFrameId);
				}
			}
		},

		onStateChanged: function() {
		},

		_drawLoop: function() {
			this._animationFrameId = window.requestAnimationFrame(this.__drawLoop);
			this._currentTime = (new Date()).getTime();
		    this._delta = (this._currentTime - this._lastTime);
		    if(this._delta > this._interval) {
		    	this.currentFrame++;
		    	this.drawLoop();
		    	this._lastTime = this._currentTime - (this._delta % this._interval);
		    }
		},
		drawLoop: function() {
		},

		keydownHandler: function(event) {
			switch(event.keyCode) {
				case KEYCODE_LEFT:
					parent.$('body').trigger(Constants.GO_TO_PREVIOUS_SLIDE);
					break;
				case KEYCODE_RIGHT:
					parent.$('body').trigger(Constants.GO_TO_NEXT_SLIDE);
					break;
			}
		},
	});

	return ContentBase;

})();
},{"Constants":"kLUUT7","core/Class":"Hzu0go"}],"oqTQ3e":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');

	var HighestHeartrateGame = ContentBase.extend({
		init: function() {
			this._super();
			console.log("[HighestHeartrateGame] init");

			this.socket = io.connect('/', {
				query: 'token=' + this.token + "&slide=highest-heartrate-game"
			});

			this._socketConnectHandler = $.proxy(this.socketConnectHandler, this);
			this._socketDisconnectHandler = $.proxy(this.socketDisconnectHandler, this);
			this._setSubstateHandler = $.proxy(this.setSubstateHandler, this);

			this.socket.on('connect', this._socketConnectHandler);
			this.socket.on('disconnect', this._socketDisconnectHandler);
			this.socket.on(Constants.SET_SUBSTATE, this._setSubstateHandler);

			this.showCurrentState();
		},

		socketConnectHandler: function() {
		},

		socketDisconnectHandler: function() {
		},

		setSubstateHandler: function(substate) {
			if(this.substate !== substate) {
				this.substate = substate;
				this.showCurrentState();
			}
		},

		startClickHandler: function() {
			this.socket.emit(Constants.SET_SUBSTATE, Constants.SHAKE_YOUR_PHONES_GAME);
		},

		showCurrentState: function() {
			$('.substate').removeClass('active');
			if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
				$('.substate-game').addClass('active');
			} else if(this.substate === Constants.SHAKE_YOUR_PHONES_FINISHED) {
				$('.substate-finished').addClass('active');
			} else {
				$('.substate-intro').addClass('active');
			}
		},

		drawLoop: function() {
		}
	});

	return HighestHeartrateGame;

})();
},{"../ContentBase":6,"Constants":"kLUUT7"}],"classes/content/highest-heartrate-game":[function(require,module,exports){
module.exports=require('oqTQ3e');
},{}],"MlY+Zr":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');
	var HeartRateCanvas = require('../../HeartRateCanvas');

	var IntroPoster = ContentBase.extend({
		init: function() {
			this._super();
			console.log("[IntroPoster] init");

			this.socket = io.connect('/', {
				query: 'token=' + this.token + "&slide=intro-poster"
			});

			this.heartRateCanvas = new HeartRateCanvas(document.getElementById('polarHeartRateCanvas'));
			this.resizeHeartRateCanvas();

			this._heartRateHandler = $.proxy(this.heartRateHandler, this);
			this._socketConnectHandler = $.proxy(this.socketConnectHandler, this);
			this._socketDisconnectHandler = $.proxy(this.socketDisconnectHandler, this);

			this.socket.on('heartRate', this._heartRateHandler);
			this.socket.on('connect', this._socketConnectHandler);
			this.socket.on('disconnect', this._socketDisconnectHandler);
			this.socket.on(Constants.HEART_RATE_POLAR, $.proxy(this.heartRatePolarHandler, this));

			$(window).on('resize', $.proxy(this.resizeHandler, this));
		},

		socketConnectHandler: function() {
			console.log("[IntroPoster] socket connect");
			this.socket.emit('requestPolarH7');
		},

		socketDisconnectHandler: function() {
			console.log("[IntroPoster] socket disconnect");
		},

		heartRatePolarHandler: function(heartRate) {
			this.heartRateCanvas.updateHeartRate(heartRate);
		},

		resizeHandler: function() {
			this.resizeHeartRateCanvas();
		},

		resizeHeartRateCanvas: function() {
			this.heartRateCanvas.resize(window.innerWidth, window.innerHeight / 2);
		}
	});

	return IntroPoster;

})();
},{"../../HeartRateCanvas":3,"../ContentBase":6,"Constants":"kLUUT7"}],"classes/content/intro-poster":[function(require,module,exports){
module.exports=require('MlY+Zr');
},{}],"classes/content/shake-your-phones":[function(require,module,exports){
module.exports=require('oLqZeW');
},{}],"oLqZeW":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');

	var ShakeYourPhones = ContentBase.extend({
		gameDuration: 10, //game lasts 30 seconds
		init: function() {
			this._super();
			console.log("[ShakeYourPhones] init");

			this.clientsMap = {};

			this.socket = io.connect('/', {
				query: 'token=' + this.token + "&slide=shake-your-phones"
			});

			this._socketConnectHandler = $.proxy(this.socketConnectHandler, this);
			this._socketDisconnectHandler = $.proxy(this.socketDisconnectHandler, this);
			this._setSubstateHandler = $.proxy(this.setSubstateHandler, this);

			this.socket.on('connect', this._socketConnectHandler);
			this.socket.on('disconnect', this._socketDisconnectHandler);
			this.socket.on(Constants.SET_SUBSTATE, this._setSubstateHandler);

			this.socket.on(Constants.SHAKE_YOUR_PHONES_CLIENT_ADDED, $.proxy(this.clientAddedHandler, this));
			this.socket.on(Constants.SHAKE_YOUR_PHONES_CLIENT_REMOVED, $.proxy(this.clientRemovedHandler, this));
			this.socket.on(Constants.SHAKE_YOUR_PHONES_CLIENT_UPDATE, $.proxy(this.clientUpdateHandler, this));
			this.socket.on(Constants.SHAKE_YOUR_PHONES_CLIENT_LIST, $.proxy(this.clientListHandler, this));

			$('.substate-intro .btn').on('click', $.proxy(this.startClickHandler, this));
			$('.substate-finished .btn').on('click', $.proxy(this.winnerClickHandler, this));

			this.showCurrentState();
		},

		socketConnectHandler: function() {
		},

		socketDisconnectHandler: function() {
		},

		setSubstateHandler: function(substate) {
			if(this.substate !== substate) {
				this.substate = substate;
				this.showCurrentState();
			}
		},

		startClickHandler: function() {
			this.socket.emit(Constants.SET_SUBSTATE, Constants.SHAKE_YOUR_PHONES_GAME);
		},

		winnerClickHandler: function() {
			this.socket.emit(Constants.SELECT_WINNER);
		},

		clientAddedHandler: function(clientInfo) {
			//console.log('[ShakeYourPhones] client added', clientInfo);
			this.clientsMap[clientInfo.id] = clientInfo;
			this.clientsMap[clientInfo.id].size = 0;
			this.clientsMap[clientInfo.id].$div = $('<div class="circle">').css({
				position: 'absolute',
				left: Math.random() * 100 + '%',
				top: Math.random() * 100 + '%',
				backgroundColor: 'rgba(' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ', 0.5)',
				width: '10px',
				height: '10px'
			});
			$('.background .substate-game').append(this.clientsMap[clientInfo.id].$div);
		},

		clientRemovedHandler: function(clientInfo) {
			//console.log('[ShakeYourPhones] client removed', clientInfo);
			this.clientsMap[clientInfo.id].$div.remove();
			delete this.clientsMap[clientInfo.id];
		},

		clientUpdateHandler: function(clientInfo) {
			//console.log('[ShakeYourPhones] client update', clientInfo);
			$.extend(this.clientsMap[clientInfo.id], clientInfo);
		},

		clientListHandler: function(list) {
			console.log('[ShakeYourPhones] client list', list);
			this.clientsMap = {};
			$('.background .substate-game').html('');
			for (var i = list.length - 1; i >= 0; i--) {
				this.clientsMap[list[i].id] = list[i];
				this.clientsMap[list[i].id].size = 0;
				this.clientsMap[list[i].id].$div = $('<div class="circle">').css({
					position: 'absolute',
					left: Math.random() * 100 + '%',
					top: Math.random() * 100 + '%',
					backgroundColor: 'rgba(' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ', 0.5)',
					width: '10px',
					height: '10px'
				});
				$('.background .substate-game').append(this.clientsMap[list[i].id].$div);
			}
		},

		showCurrentState: function() {
			$('.substate').removeClass('active');
			if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
				$('.substate-game .countdown').html(this.gameDuration);
				$('.substate-game').addClass('active');
				this.countDownTimeout = setTimeout($.proxy(this.countDownHandler, this, this.gameDuration - 1), 1000);
			} else if(this.substate === Constants.SHAKE_YOUR_PHONES_FINISHED) {
				$('.substate-finished').addClass('active');
			} else {
				$('.substate-intro').addClass('active');
			}
		},

		countDownHandler: function(timeLeft) {
			$('.substate-game .countdown').html(timeLeft);
			if(timeLeft > 0) {
				this.countDownTimeout = setTimeout($.proxy(this.countDownHandler, this, timeLeft - 1), 1000);
			} else {
				this.socket.emit(Constants.SET_SUBSTATE, Constants.SHAKE_YOUR_PHONES_FINISHED);
			}
		},

		drawLoop: function() {
			if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
				$.each(this.clientsMap, function(key, value){
					var target = 3 * value.maximumMotion;
					value.size += (target - value.size) * 0.2;
					value.$div.css({
						width: value.size + 'px',
						height: value.size + 'px'
					});
				});
			}
		},
	});

	return ShakeYourPhones;

})();
},{"../ContentBase":6,"Constants":"kLUUT7"}],13:[function(require,module,exports){
(function(){

	var presentation;

	function init() {
		if($('#presentation').length > 0) {
			var Presentation = require('./classes/Presentation');
			presentation = new Presentation();
		}
	}

	init();

})();
},{"./classes/Presentation":4}],"Hzu0go":[function(require,module,exports){
/* jshint ignore:start */
/* Simple JavaScript Inheritance
 * By John Resig http://ejohn.org/
 * MIT Licensed.
 */
// Inspired by base2 and Prototype
module.exports = (function(){
	var initializing = false, fnTest = /xyz/.test(function(){xyz;}) ? /\b_super\b/ : /.*/;

	// The base Class implementation (does nothing)
	this.Class = function(){};

	// Create a new Class that inherits from this class
	Class.extend = function(prop) {
		var _super = this.prototype;

		// Instantiate a base class (but only create the instance,
		// don't run the init constructor)
		initializing = true;
		var prototype = new this();
		initializing = false;

		// Copy the properties over onto the new prototype
		for (var name in prop) {
			// Check if we're overwriting an existing function
			prototype[name] = typeof prop[name] == "function" &&
				typeof _super[name] == "function" && fnTest.test(prop[name]) ?
				(function(name, fn){
					return function() {
						var tmp = this._super;

						// Add a new ._super() method that is the same method
						// but on the super-class
						this._super = _super[name];

						// The method only need to be bound temporarily, so we
						// remove it when we're done executing
						var ret = fn.apply(this, arguments);
						this._super = tmp;

						return ret;
					};
				})(name, prop[name]) :
				prop[name];
		}

		// The dummy class constructor
		function Class() {
			// All construction is actually done in the init method
			if ( !initializing && this.init )
				this.init.apply(this, arguments);
		}

		// Populate our constructed prototype object
		Class.prototype = prototype;

		// Enforce the constructor to be what we expect
		Class.prototype.constructor = Class;

		// And make this class extendable
		Class.extend = arguments.callee;

		return Class;
	};
	return Class;
})();
/* jshint ignore:end */
},{}],"core/Class":[function(require,module,exports){
module.exports=require('Hzu0go');
},{}]},{},[13])