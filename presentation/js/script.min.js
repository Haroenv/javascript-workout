require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function(){

	var Presentation = require('./classes/Presentation');
	var data = require('../../../data.json');

  function init() {
  	if($('#presentation').length > 0) {
  		new Presentation(data, 'presentation');
  	}
  }

	init();

})();
},{"../../../data.json":2,"./classes/Presentation":5}],2:[function(require,module,exports){
module.exports={
	"slides": [
		{
			"name": "title-slide",
			"presentation": {
				"url": "slides/title.html"
			},
			"mobile": {
				"url": "slides/text.html?text=Hello"
			}
		},
		{
			"name": "intro-poster",
			"mobile": {
				"url": "slides/text.html?text=Hello"
			}
		},
		{
			"name": "010-intro-01",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.002.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Hello"
			}
		},
		{
			"name": "010-showreel",
			"mobile": {
				"url": "slides/text.html?text=Devine+Showreel"
			}
		},
		{
			"name": "010-intro-03",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.004.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Hello"
			}
		},
		{
			"name": "ble-explanation-00",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.005.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-01",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.006.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-02",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.007.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-03",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.008.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-04",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.009.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-05",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.010.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-06",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.011.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-07",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.012.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-08",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.013.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-09",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.014.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-10",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.015.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-11",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.016.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-12",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.017.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-13",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.018.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-14",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.019.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-15",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.020.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-16",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.021.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-17",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.022.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "ble-explanation-18",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.023.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "020-noble-000",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.024.png"
			},
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "020-noble-001",
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "020-noble-002",
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "020-noble-003",
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "020-noble-004",
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "020-noble-005",
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "020-noble-006",
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "020-noble-007",
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "020-noble-008",
			"mobile": {
				"url": "slides/text.html?text=BLE"
			}
		},
		{
			"name": "pulse-explanation-01",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.033.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Pulse+Sensor"
			}
		},
		{
			"name": "pulse-explanation-02",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.034.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Pulse+Sensor"
			}
		},
		{
			"name": "pulse-explanation-03",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.035.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Pulse+Sensor"
			}
		},
		{
			"name": "pulse-explanation-04",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.036.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Pulse+Sensor"
			}
		},
		{
			"name": "pulse-explanation-05",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.037.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Pulse+Sensor"
			}
		},
		{
			"name": "pulse-explanation-06",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.038.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Pulse+Sensor"
			}
		},
		{
			"name": "pulse-explanation-07",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.039.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Pulse+Sensor"
			}
		},
		{
			"name": "pulse-explanation-08",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.040.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Pulse+Sensor"
			}
		},
		{
			"name": "030-pulse-001",
			"mobile": {
				"url": "slides/text.html?text=Pulse+Sensor"
			}
		},
		{
			"name": "030-pulse-002",
			"mobile": {
				"url": "slides/text.html?text=Pulse+Sensor"
			}
		},
		{
			"name": "shake-your-phones"
		},
		{
			"name": "highest-heartrate-game",
			"mobile": {
				"url": "slides/text.html?text=Highest+Heartrate+Game"
			}
		},
		{
			"name": "lowest-heartrate-game",
			"mobile": {
				"url": "slides/text.html?text=Lowest+Heartrate+Game"
			}
		},
		{
			"name": "firmata-explanation-01",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.044.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Firmata"
			}
		},
		{
			"name": "firmata-explanation-02",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.045.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Firmata"
			}
		},
		{
			"name": "firmata-explanation-03",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.046.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Firmata"
			}
		},
		{
			"name": "firmata-explanation-04",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.047.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Firmata"
			}
		},
		{
			"name": "firmata-explanation-05",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.048.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Firmata"
			}
		},
		{
			"name": "firmata-arduino-led",
			"mobile": {
				"url": "slides/text.html?text=Firmata+Demo"
			}
		},
		{
			"name": "firmata-arduino-servo",
			"mobile": {
				"url": "slides/text.html?text=Firmata+Demo"
			}
		},
		{
			"name": "firmata-arduino-sensor",
			"mobile": {
				"url": "slides/text.html?text=Firmata+Demo"
			}
		},
		{
			"name": "cylon-explanation-01",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.050.png"
			},
			"mobile": {
				"url": "slides/text.html?text=CylonJS"
			}
		},
		{
			"name": "cylon-explanation-02",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.051.png"
			},
			"mobile": {
				"url": "slides/text.html?text=CylonJS"
			}
		},
		{
			"name": "cylon-led",
			"mobile": {
				"url": "slides/text.html?text=Cylon+Demo"
			}
		},
		{
			"name": "cylon-servo",
			"mobile": {
				"url": "slides/text.html?text=Cylon+Demo"
			}
		},
		{
			"name": "cylon-sensor",
			"mobile": {
				"url": "slides/text.html?text=Cylon+Demo"
			}
		},
		{
			"name": "cylon-leap",
			"mobile": {
				"url": "slides/text.html?text=Cylon+Demo"
			}
		},
		{
			"name": "cylon-opencv",
			"mobile": {
				"url": "slides/text.html?text=Cylon+Demo"
			}
		},
		{
			"name": "050-tessel-explanation-01",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.053.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Tessel"
			}
		},
		{
			"name": "tessel-onboard-led",
			"mobile": {
				"url": "slides/text.html?text=Tessel"
			}
		},
		{
			"name": "tessel-gpio-led",
			"mobile": {
				"url": "slides/text.html?text=Tessel"
			}
		},
		{
			"name": "050-tessel-explanation-03",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.056.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Tessel"
			}
		},
		{
			"name": "tessel-accel",
			"mobile": {
				"url": "slides/text.html?text=Tessel"
			}
		},
		{
			"name": "tessel-ambient",
			"mobile": {
				"url": "slides/text.html?text=Tessel"
			}
		},
		{
			"name": "tessel-ambient-trigger",
			"mobile": {
				"url": "slides/text.html?text=Tessel"
			}
		},
		{
			"name": "tessel-ambient-trigger-led",
			"mobile": {
				"url": "slides/text.html?text=Tessel"
			}
		},
		{
			"name": "spacebrew-explanation-01",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.061.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "spacebrew-explanation-02",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.062.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "spacebrew-explanation-03",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.063.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "spacebrew-explanation-04",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.064.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "spacebrew-explanation-05",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.065.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "spacebrew-explanation-07",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.066.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "spacebrew-explanation-08",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.067.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "spacebrew-explanation-09",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.068.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "spacebrew-explanation-10",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.069.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "spacebrew-explanation-11",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.070.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "060-spacebrew-yun-setup",
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "060-spacebrew-yun-loop",
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "060-spacebrew-client-demo",
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "react-phones"
		},
		{
			"name": "060-spacebrew-arduino-dance",
			"mobile": {
				"url": "slides/text.html?text=Spacebrew"
			}
		},
		{
			"name": "thank-you",
			"presentation": {
				"url": "slides/image.html?image=images/keynote/keynote.073.png"
			},
			"mobile": {
				"url": "slides/text.html?text=Thank+You"
			}
		}
	]
}
},{}],3:[function(require,module,exports){
module.exports = (function(){

	function HeartRateCanvas(canvas) {
		this.pixelsPerBeatAt60BPM = 100;
		this.frameNr = 0;
		this.fps = 60;
		this.numValues = 0;
		this.numValuesMargin = 9;
		this.numValuesWithMargin = 9;
		this.heartRate = 0;
		this.backgroundColor = '#fff';
		this.strokeColor = '#00f';

		this.canvas = canvas;
		this.width = this.canvas.width;
		this.height = this.canvas.height;
		this._initSizeDependedVariables();

		this.heartRateTickInterval = Math.round(this.fps * 60 / this.heartRate);

		this.stage = new createjs.Stage(this.canvas);
		
		this.drawingShape = new createjs.Shape();
		this.stage.addChild(this.drawingShape);

		createjs.Ticker.timingMode = createjs.Ticker.RAF_SYNCHED;
		createjs.Ticker.setFPS(this.fps);
		this._tick = $.proxy(this.tick, this);
		createjs.Ticker.addEventListener("tick", this._tick);
	}

	HeartRateCanvas.prototype.resize = function(w, h) {
		this.width = this.canvas.width = w;
		this.height = this.canvas.height = h;
		this._initSizeDependedVariables();
	};

	HeartRateCanvas.prototype._initSizeDependedVariables = function() {
		this.numValues = Math.round(this.width * 0.80);
		this.numValuesWithMargin = this.numValues + this.numValuesMargin;
		if(!this.values) {
			this.values = [];
		}
		this.values.length = this.numValuesWithMargin;
		this.canvasVerticalCenter = this.height / 2;
	};

	HeartRateCanvas.prototype.dispose = function() {
		createjs.Ticker.removeEventListener("tick", this._tick);
	};

	HeartRateCanvas.prototype.tick = function() {
		this.frameNr++;

		this.drawingShape.graphics.clear()
			//.beginFill(this.backgroundColor)
			//.drawRect(0, 0, this.width, this.height)
			//.endFill()
			.beginStroke(this.strokeColor);

		this.drawingShape.graphics.moveTo(0, this.canvasVerticalCenter - (this.canvasVerticalCenter * this.values[0]));
		for(var i = 1; i < this.numValues; i++) {
			this.drawingShape.graphics.lineTo(i, this.canvasVerticalCenter - (this.canvasVerticalCenter * this.values[i]));
		}
		this.drawingShape.graphics.endStroke();

		this.drawingShape.graphics.beginFill(this.strokeColor)
			.drawCircle(this.numValues - 1, this.canvasVerticalCenter - (this.canvasVerticalCenter * this.values[this.numValues - 1]), 2)
			.endFill();

		//does the tick align with a beat?
		if(this.heartRate > 0 && this.frameNr % this.heartRateTickInterval === 0) {
			this.frameNr = 0;//reset to zero
			var strength = 0.7 + Math.random() * 0.3;
			this.values[this.numValuesWithMargin - this.numValuesMargin - 1] = 0.05 * strength;
			this.values[this.numValuesWithMargin - this.numValuesMargin + 0] = 0.1 * strength;
			this.values[this.numValuesWithMargin - this.numValuesMargin + 1] = 0.3 * strength;
			this.values[this.numValuesWithMargin - this.numValuesMargin + 2] = 1 * strength;
			this.values[this.numValuesWithMargin - this.numValuesMargin + 3] = 0 * strength;
			this.values[this.numValuesWithMargin - this.numValuesMargin + 4] = -1 * strength;
			this.values[this.numValuesWithMargin - this.numValuesMargin + 5] = -0.3 * strength;
			this.values[this.numValuesWithMargin - this.numValuesMargin + 6] = -0.1 * strength;
			this.values[this.numValuesWithMargin - this.numValuesMargin + 7] = -0.05 * strength;
			this.values[this.numValuesWithMargin - this.numValuesMargin + 8] = 0 * strength;
		}

		this.values.shift();
		this.values.shift();
		this.values.push(Math.random() * 0.05 - 0.1);
		this.values.push(Math.random() * 0.05 - 0.1);

		this.stage.update();
	};

	HeartRateCanvas.prototype.updateHeartRate = function(heartRate) {
		this.heartRate = heartRate;
		if(this.heartRate > 0) {
			this.heartRateTickInterval = Math.round(this.fps * 60 / this.heartRate);
		}
	};

	return HeartRateCanvas;

})();
},{}],4:[function(require,module,exports){
module.exports = (function(){

	var MobileServerBridgeBase = require('shared/MobileServerBridge');

	var Config = require('./config');
	var Constants = require('Constants');

	function MobileServerBridge(presentation, url) {
		MobileServerBridgeBase.call(this, presentation, url);
		bean.on(this.presentation, Constants.SET_CURRENT_SLIDE_INDEX, this.currentSlideIndexChanged.bind(this));
	}

	MobileServerBridge.prototype = Object.create(MobileServerBridgeBase.prototype);

	MobileServerBridge.prototype.getLoginCredentials = function() {
		return {
			email: Config.mobileServerUsername,
			password: Config.mobileServerPassword,
		};
	};

	MobileServerBridge.prototype.socketConnectHandler = function() {
		MobileServerBridgeBase.prototype.socketConnectHandler.call(this);
		this.tryToSend(Constants.MESSAGE, {
			target: {
				client: 'mobile',
			},
			content: {
				action: Constants.SET_CURRENT_SLIDE_INDEX,
				currentSlideIndex: this.presentation.currentSlideIndex
			}
		});
	};

	MobileServerBridge.prototype.currentSlideIndexChanged = function(currentSlideIndex) {
		this.tryToSend(Constants.MESSAGE, {
			target: {
				client: 'mobile',
			},
			content: {
				action: Constants.SET_CURRENT_SLIDE_INDEX,
				currentSlideIndex: currentSlideIndex
			}
		});
	};

	return MobileServerBridge;

})();
},{"./config":7,"Constants":"Constants","shared/MobileServerBridge":"shared/MobileServerBridge"}],5:[function(require,module,exports){
module.exports = (function(){

	var PresentationBase = require('shared/Presentation');

	var Constants = require('Constants');
	var Config = require('./config');
	var PolarH7 = require('./sensors/PolarH7');
	var ChildApp = require('./childapps/ChildApp');
	var MobileServerBridge = require('./MobileServerBridge');

	var KEYCODE_LEFT = 37;
	var KEYCODE_RIGHT = 39;

	function Presentation(data, role) {
		PresentationBase.call(this, data, 'presentation');

		this.elevatorMusicPlaying = false;
		this.elevatorMusic = false;

		this.polarH7 = new PolarH7();
		this.polarH7.on(PolarH7.HEART_RATE, this.heartRatePolarHandler.bind(this));

		$('#consoleModal').on('show.bs.modal', function (e) {
			var w = $('#consoleModal iframe')[0].contentWindow;
			w.postMessage('consoleModalOpen', 'http://localhost:3000');
		});

		this.elevatorMusic = $('#elevatormusic')[0];
		$('.elevator-button').on('click', $.proxy(this.toggleElevatorMusic, this));

		$(window).on('keydown', $.proxy(this.keydownHandler, this));

		$('body').on(Constants.GO_TO_PREVIOUS_SLIDE, $.proxy(this.goToPreviousSlide, this));
		$('body').on(Constants.GO_TO_NEXT_SLIDE, $.proxy(this.goToNextSlide, this));
		$('body').on(Constants.OPEN_COMMAND_LINE, $.proxy(this.openCommandLine, this));
		$('body').on(Constants.OPEN_CAMERA, $.proxy(this.openCamera, this));
	}

	Presentation.prototype = Object.create(PresentationBase.prototype);

	Presentation.prototype.createMobileServerBridge = function() {
		return new MobileServerBridge(this, Config.mobileServerUrl);
	};

	Presentation.prototype.toggleElevatorMusic = function() {
		this.elevatorMusicPlaying = !this.elevatorMusicPlaying;
		if(this.elevatorMusicPlaying) {
			this.elevatorMusic.play();
		} else {
			this.elevatorMusic.pause();
		}
	};

	Presentation.prototype.createIFrameBridges = function(data) {
		PresentationBase.prototype.createIFrameBridges.call(this, data);
		var that = this;
		var $slideMenu = $('#slideMenu');
		var numIFrameBridges = this.iFrameBridges.length;
		for(var i = 0; i < numIFrameBridges; i++) {
			var iFrameBridge = this.iFrameBridges[i];
			$slideMenu.append('<li><a href="#" data-slidenr="' + i + '">' + (i + 1) + ' ' + iFrameBridge.name + '</a></li>');
		}
		$slideMenu.find('a').on('click', function(event){
			event.preventDefault();
			that.setCurrentSlideIndex(parseInt($(this).data('slidenr')));
		});
	};

	Presentation.prototype.iFrameMessageHandler = function(event) {
		PresentationBase.prototype.iFrameMessageHandler.call(this, event);
		if(!event.data) {
			return;
		}
		switch(event.data.action) {
			case Constants.GO_TO_PREVIOUS_SLIDE:
				this.goToPreviousSlide();
				break;
			case Constants.GO_TO_NEXT_SLIDE:
				this.goToNextSlide();
				break;
			case Constants.OPEN_COMMAND_LINE:
				this.openCommandLine();
				break;
			case Constants.OPEN_CAMERA:
				this.openCamera();
				break;
			case Constants.CHILD_APP_SAVE_CODE:
				ChildApp.getInstance().saveCode(event.data.code, event.data.type);
				break;
			case Constants.CHILD_APP_RUN_CODE:
				ChildApp.getInstance().runCode(event.data.code, event.data.type);
				break;
		}
	};

	Presentation.prototype.heartRatePolarHandler = function(heartRate) {
		$('#global-heart-rate').text(heartRate + ' bpm');
		var currentIFrameBridge = this.getIFrameBridgeByIndex(this.currentSlideIndex);
		if(currentIFrameBridge) {
			currentIFrameBridge.tryToPostMessage({
				action: Constants.HEART_RATE_POLAR,
				heartRate: heartRate
			});
		}
	};

	Presentation.prototype.keydownHandler = function(event) {
		switch(event.keyCode) {
			case KEYCODE_LEFT:
				this.goToPreviousSlide();
				break;
			case KEYCODE_RIGHT:
				this.goToNextSlide();
				break;
		}
	};

	Presentation.prototype.openCommandLine = function() {
		$('#consoleModal').modal('show');
	};

	Presentation.prototype.openCamera = function() {
		$('#webcamModal').modal('show');
	};

	return Presentation;

})();
},{"./MobileServerBridge":4,"./childapps/ChildApp":6,"./config":7,"./sensors/PolarH7":8,"Constants":"Constants","shared/Presentation":"shared/Presentation"}],6:[function(require,module,exports){
var Config = require('../config'),
	events = requireNode('events'),
	fs = requireNode('fs'),
	process = requireNode('child_process'),
	util = requireNode('util'),
	path = requireNode('path');

function ChildApp() {
	events.EventEmitter.call(this);
	console.log("[ChildApp] constructor");
}

util.inherits(ChildApp, events.EventEmitter);

ChildApp.getInstance = function() {
	if(!ChildApp.instance) {
		ChildApp.instance = new ChildApp();
	}
	return ChildApp.instance;
};

ChildApp.prototype.saveCode = function(code, type, cb) {
	//if code is running, stop it
	if(this.runner) {
		this.stop();
		console.log("[ChildApp] kill() executed");
		setTimeout(this.saveCode.bind(this, code, type, cb), 500);
	} else {
		var filePath = Config.childNodeAppFilePath;
		if(type === 'tessel') {
			filePath = Config.childTesselAppFilePath;
		}
		fs.writeFile(filePath, code, function(err) {
				if(err) {
						console.log(err);
				} else {
						console.log("[ChildApp] The file was saved!");
						if(cb) {
							cb();
						}
				}
		});
	}
};

ChildApp.prototype.runCode = function(code, type) {
	console.log("[ChildApp] runCode");
	//write code to file & run it
	this.saveCode(code, type, (function(){
		//run the code
		if(type === 'tessel') {
			this.runner = process.spawn("tessel", ["run", Config.childTesselAppFilePath], {cwd: path.dirname(Config.childTesselAppFilePath)});
		} else {
			console.log("[ChildApp] spawn node", Config.childNodeAppFilePath);
			this.runner = process.spawn("node", [Config.childNodeAppFilePath], {cwd: path.dirname(Config.childNodeAppFilePath)});
		}
		this.runner.stdout.on('data', this.onRunnerData.bind(this));
		this.runner.stderr.on('data', this.onRunnerData.bind(this));
		this.runner.on('disconnect', this.onDisconnect.bind(this));
		this.runner.on('close', this.onClose.bind(this));
	}).bind(this));
};

ChildApp.prototype.stop = function() {
	if(this.runner) {
		this.runner.stdout.removeAllListeners();
		this.runner.stderr.removeAllListeners();
		this.runner.stdin.end();
		this.runner.kill();
		this.runner = false;
	}
};

ChildApp.prototype.onRunnerData = function(data) {
	console.log(data.toString().trim());
};

ChildApp.prototype.onDisconnect = function() {
	console.log('[ChildApp] runner disconnected');
	this.runner = false;
};

ChildApp.prototype.onClose = function() {
	console.log('[ChildApp] runner closed');
	this.runner = false;
};

module.exports = ChildApp;
},{"../config":7}],7:[function(require,module,exports){
var path = requireNode('path');

var __dirname = requireNode('./js/src/classes/config/dirname');

var Config = {};

// Retrieve local ip for Config
var ip = '127.0.0.1', ifaces = requireNode('os').networkInterfaces();
for (var dev in ifaces) { 
	if(dev.indexOf('bridge') !== 0) {
		/* jshint ignore:start */
		ifaces[dev].forEach(function(details) { 
			if (details.family === 'IPv4') {
				ip = details.address; 
			}
		});
		/* jshint ignore:end */
	}
}

Config.childNodeAppFilePath = path.normalize(__dirname + '/../../../../../child-app/node/app.js');
Config.childTesselAppFilePath = path.normalize(__dirname + '/../../../../../child-app/tessel/app.js');
Config.ip = ip;

//Config.mobileServerUrl = "http://jsworkout.herokuapp.com";
Config.mobileServerUrl = "http://localhost:5000";
Config.mobileServerUsername = "wouter.verweirder@gmail.com";
Config.mobileServerPassword = "geheim";

module.exports = Config;
},{}],8:[function(require,module,exports){
var events = requireNode('events'),
	util = requireNode('util');

var POLARH7_HRM_HEART_RATE_SERVICE_UUID = "180d";

var POLARH7_HRM_MEASUREMENT_CHARACTERISTIC_UUID = "2a37";

var serviceUUIDs = [POLARH7_HRM_HEART_RATE_SERVICE_UUID];

function PolarH7() {
	events.EventEmitter.call(this);
	console.log("[PolarH7] constructor");

	this.polarH7Peripheral = false;

	this._stateChangeHandler = this.stateChangeHandler.bind(this);
	this._discoverHandler = this.discoverHandler.bind(this);

	this.noble = requireNode('noble');
	this.noble.on('stateChange', this._stateChangeHandler);
	this.noble.on('discover', this._discoverHandler);
}

util.inherits(PolarH7, events.EventEmitter);

PolarH7.HEART_RATE = 'heartRate';

PolarH7.prototype.stateChangeHandler = function(state) {
	console.log('[PolarH7] stateChange', state);
	this.emit('stateChange', state);
	if(state === 'poweredOn') {
		this.noble.startScanning(serviceUUIDs);
	} else {
		this.noble.stopScanning();
	}
};

PolarH7.prototype.discoverHandler = function(peripheral) {
	var foundSuitablePeripheral = false;
	for (var i = peripheral.advertisement.serviceUuids.length - 1; i >= 0; i--) {
		if(peripheral.advertisement.serviceUuids[i] === POLARH7_HRM_HEART_RATE_SERVICE_UUID) {
			foundSuitablePeripheral = true;
			break;
		}
	}
	if(foundSuitablePeripheral) {
		this.onFoundSuitablePeripheral(peripheral);
	} else {
		console.log('[PolarH7] no suitable peripheral');
	}	
};

PolarH7.prototype.onFoundSuitablePeripheral = function(peripheral) {
	console.log("[PolarH7]", peripheral.advertisement.localName);
	this.noble.stopScanning();
	this.polarH7Peripheral = peripheral;
	this.polarH7Peripheral.connect(this.onConnect.bind(this));
};

PolarH7.prototype.onConnect = function(error) {
	console.log("[PolarH7] on connect");
	this.emit('connect');
	this.polarH7Peripheral.discoverServices([], this.onPeripheralDiscoverServices.bind(this));
};

PolarH7.prototype.onPeripheralDiscoverServices = function(error, services) {
	console.log("[PolarH7] onPeripheralDiscoverServices");
	for (var i = services.length - 1; i >= 0; i--) {
		if(services[i].name) {
			console.log(services[i].uuid, services[i].name);
			services[i].discoverCharacteristics([], this.onPeripheralServiceDiscoverCharacteristics.bind(this));
		}
	}	
};

PolarH7.prototype.onPeripheralServiceDiscoverCharacteristics = function(error, characteristics) {
	function errorHandler(error){
		if(error) {
			console.log(error);
		}
	}
	for (var i = characteristics.length - 1; i >= 0; i--) {
		var characteristic = characteristics[i];
		if(characteristic.uuid === POLARH7_HRM_MEASUREMENT_CHARACTERISTIC_UUID) {
			//console.log("HRM Characteristic");
			characteristic.on('read', this.onHeartRateRead.bind(this));
			characteristic.notify(true, errorHandler);
		}
	}
};

PolarH7.prototype.onHeartRateRead = function(data, isNotification) {
	if((data[0] & 0x01) === 0) {
		var heartRate = data[1];
		if(heartRate) {
			this.emit(PolarH7.HEART_RATE, heartRate);
		}
	}
};

module.exports = PolarH7;
},{}],9:[function(require,module,exports){
module.exports = (function(){

	var SharedContentBase = require('shared/ContentBase');
	var Constants = require('Constants');

	var KEYCODE_LEFT = 37;
	var KEYCODE_RIGHT = 39;

	function ContentBase(name) {
		SharedContentBase.call(this, name);
		this.slideControlEnabled = true;
		$(window).on('keydown', this.keydownHandler.bind(this));			
	}

	ContentBase.prototype = Object.create(SharedContentBase.prototype);

	ContentBase.prototype.keydownHandler = function(event) {
		if(this.slideControlEnabled) {
			switch(event.keyCode) {
				case KEYCODE_LEFT:
					this.postMessage({action: Constants.GO_TO_PREVIOUS_SLIDE});
					break;
				case KEYCODE_RIGHT:
					this.postMessage({action: Constants.GO_TO_NEXT_SLIDE});
					break;
			}
		}
	};

	return ContentBase;

})();
},{"Constants":"Constants","shared/ContentBase":"shared/ContentBase"}],10:[function(require,module,exports){
module.exports = (function(){

	function GameCharacter(spriteSheet) {
		this.speedX = 0;
		this.speedY = 0;
		this.minX = 0;
		this.minY = 0;
		this.maxX = 0;
		this.maxY = 0;
		this.finalX = 0;
		this.finalY = 0;
		this.jumping = false;
		this.finalReached = false;
		this.state = false;

		this.sprite = new createjs.Sprite(spriteSheet);
		this.sprite.framerate = 12;
	}

	GameCharacter.prototype.setSpeedX = function(value) {
		value = Math.max(0, Math.min(1, value));
		this.speedX = value;
	};

	GameCharacter.prototype.jump = function(amount) {
		if(!this.jumping) {
			this.jumping = true;
			if(!amount) {
				amount = 14;
			}
			this.speedY = -amount;
		}
	};

	GameCharacter.prototype.setState = function(value) {
		if(value !== this.state) {
			this.state = value;
			switch(this.state) {
				case "jumping":
					this.sprite.gotoAndStop("jump");
					break;
				case "running":
					this.sprite.gotoAndPlay("run");
					break;
				default:
					this.sprite.gotoAndStop("run");
					break;
			}
		}
	};

	GameCharacter.prototype.setCorrectState = function() {
		if(this.jumping) {
			this.setState("jumping");
		} else {
			if(this.speedX > 0) {
				this.setState("running");
			} else {
				this.setState("standing");
			}
		}
	};

	GameCharacter.prototype.update = function() {
		var targetX = this.sprite.x + (this.speedX * 4);
		var targetY = this.sprite.y + this.speedY;

		this.speedY += 1;
		if(targetY > this.maxY) {
			this.speedY = 0;
			if(this.jumping) {
				this.jumping = false;
			}
		}

		this.setCorrectState();

		this.sprite.x = Math.round(Math.min(this.maxX, Math.max(this.minX, targetX)));
		this.sprite.y = Math.round(Math.min(this.maxY, Math.max(this.minY, targetY)));
	};

	return GameCharacter;

})();
},{}],11:[function(require,module,exports){
module.exports = (function(){

	function GameCharacter(spriteSheet) {
		this.state = false;
		this.heartRate = 0;
		this.sprite = new createjs.Sprite(spriteSheet);
		this.setState("standing");
	}

	GameCharacter.prototype.setState = function(value) {
		if(value !== this.state) {
			this.state = value;
			switch(this.state) {
				case "falling":
					this.sprite.framerate = 12;
					this.sprite.gotoAndPlay("falling");
					break;
				case "kameha":
					this.sprite.gotoAndPlay("kameha");
					break;
				default:
					this.sprite.framerate = 6;
					this.sprite.gotoAndPlay("standing");
					break;
			}
		}
	};

	GameCharacter.prototype.update = function() {
	};

	return GameCharacter;

})();
},{}],12:[function(require,module,exports){
module.exports = (function(){

	function DancegameButton(spriteSheet, color, orientation) {
		this.spriteSheet = spriteSheet;
		this.color = color;
		this.orientation = orientation;

		this.state = DancegameButton.STATE_NORMAL;

		this.sprite = new createjs.Sprite(spriteSheet, color);
		this.sprite.regX = this.sprite.getBounds().width / 2;
		this.sprite.regY = this.sprite.getBounds().height / 2;
		switch(orientation) {
			case "up":
			this.sprite.rotation = 180;
				break;
			case "left":
				this.sprite.rotation = 90;
				break;
			case "right":
				this.sprite.rotation = 270;
				break;
		}
	}

	DancegameButton.prototype.setState = function(state) {
		if(this.state !== state) {
			this.state = state;
			switch(this.state) {
				case DancegameButton.STATE_CORRECT:
					this.gotoAndStop(this.color + '-correct');
					break;
				case DancegameButton.STATE_WRONG:
					this.gotoAndStop(this.color + '-wrong');
					break;
				default:
					this.gotoAndStop(this.color);
					break;
			}
		}
	};

	DancegameButton.prototype.gotoAndStop = function(frame) {
		this.sprite.gotoAndStop(frame);
	};

	DancegameButton.prototype.update = function(speed) {
		this.sprite.y += -speed;
	};

	DancegameButton.STATE_NORMAL = 'normal';
	DancegameButton.STATE_CORRECT = 'correct';
	DancegameButton.STATE_WRONG = 'wrong';

	return DancegameButton;

})();
},{}],13:[function(require,module,exports){
module.exports = (function(){

	function ScoreBar() {
		this.score = 0;
		this.display = new createjs.Container();

		var bgGfx = new createjs.Graphics();
		bgGfx.s('#fff').dr(0.5, 0.5, 521, 34).es();
		var bg = new createjs.Shape(bgGfx);

		var gradientGfx = new createjs.Graphics();
		gradientGfx.lf(["#f00","#0f0"], [0, 1], 0, 0, 520, 0).dr(0, 0, 520, 33).ef();
		this.gradient = new createjs.Shape(gradientGfx);
		this.gradient.x = 1;
		this.gradient.y = 1;

		this.gradientMaskGfx = new createjs.Graphics();
		this.gradientMaskGfx.f('#fff').dr(0, 0, 520, 33).ef();
		this.gradientMask = new createjs.Shape(this.gradientMaskGfx);
		this.gradientMask.x = this.gradient.x;
		this.gradientMask.y = this.gradient.y;

		this.gradient.mask = this.gradientMask;

		this.gradientMask.scaleX = 0;

		this.display.addChild(bg, this.gradient);
	}

	ScoreBar.prototype.setScore = function(value) {
		value = Math.min(1, Math.max(0, value));
		if(value !== this.score) {
			this.score = value;
		}
	};

	ScoreBar.prototype.update = function() {
		this.gradientMask.scaleX += (this.score - this.gradientMask.scaleX) * 0.05;
	};

	return ScoreBar;

})();
},{}],"Constants":[function(require,module,exports){
module.exports = (function(){
	
	var Constants = {
		GO_TO_PREVIOUS_SLIDE : 'goToPreviousSlide',
		GO_TO_NEXT_SLIDE : 'goToNextSlide',
		SET_SLIDES : 'setSlides',
		SET_CURRENT_SLIDE_INDEX : 'setCurrentSlideIndex',

		MESSAGE : 'message',
		SOCKET_SEND : 'socketSend',
		SOCKET_RECEIVE : 'socketReceive',
		JOIN_SLIDE_ROOM : 'joinSlideRoom',
		LEAVE_SLIDE_ROOM : 'leaveSlideRoom',

		ROLE_PRESENTATION : 'presentation',
		ROLE_MOBILE : 'mobile',

		STATE_ACTIVE : 'active',
		STATE_INACTIVE : 'inactive',

		SET_SUBSTATE : 'setSubstate',

		SHAKE_YOUR_PHONES_INTRO : 'shakeYourPhonesIntro',
		SHAKE_YOUR_PHONES_GAME : 'shakeYourPhonesGame',
		SHAKE_YOUR_PHONES_FINISHED : 'shakeYourPhonesFinished',

		SHAKE_YOUR_PHONES_CLIENT_ADDED : 'shakeYourPhonesClientAdded',
		SHAKE_YOUR_PHONES_CLIENT_REMOVED : 'shakeYourPhonesClientRemoved',
		SHAKE_YOUR_PHONES_CLIENT_LIST : 'shakeYourPhonesClientList',
		SHAKE_YOUR_PHONES_CLIENT_UPDATE : 'shakeYourPhonesClientUpdate',

		HIGHEST_HEARTRATE_GAME_INTRO : 'highestHeartrateGameIntro',
		HIGHEST_HEARTRATE_GAME_GAME : 'highestHeartrateGameGame',
		HIGHEST_HEARTRATE_GAME_FINISHED : 'highestHeartrateGameFinished',

		LOWEST_HEARTRATE_GAME_INTRO : 'lowestHeartrateGameIntro',
		LOWEST_HEARTRATE_GAME_GAME : 'lowestHeartrateGameGame',
		LOWEST_HEARTRATE_GAME_FINISHED : 'lowestHeartrateGameFinished',

		REACT_PHONES_INTRO : 'reactPhonesIntro',
		REACT_PHONES_GAME : 'reactPhonesGame',
		REACT_PHONES_FINISHED : 'reactPhonesFinished',

		REACT_PHONES_CLIENT_ADDED : 'reactPhonesClientAdded',
		REACT_PHONES_CLIENT_REMOVED : 'reactPhonesClientRemoved',
		REACT_PHONES_CLIENT_LIST : 'reactPhonesClientList',
		REACT_PHONES_CLIENT_UPDATE : 'reactPhonesClientUpdate',

		DANCE_PAD_GAME_INTRO : 'dancePadGameIntro',
		DANCE_PAD_GAME_GAME : 'dancePadGameGame',
		DANCE_PAD_GAME_FINISHED : 'dancePadGameFinished',

		UPDATE_MAXIMUM_MOTION : 'updateMaximumMotion',
		UPDATE_REACTION_SPEED : 'updateReactionSpeed',
		HEART_RATE_POLAR : 'heartRatePolar',
		HEART_RATE_SPARK : 'heartRateSpark',
		SELECT_WINNER : 'selectWinner',
		BLINK : 'blink',

		TWEET : 'tweet',
		GET_ALL_TWEETS : 'getAllTweets',
		GET_ALL_TWEETS_RESULT : 'getAllTweetsResult',

		CHILD_APP_SAVE_CODE : 'childAppSaveCode',
		CHILD_APP_RUN_CODE : 'childAppRunCode',
		OPEN_COMMAND_LINE: 'openCommandLine',
		OPEN_CAMERA: 'openCamera'
	};

	return Constants;

})();
},{}],"shared/ContentBase":[function(require,module,exports){
module.exports = (function(){
	
	var Constants = require('Constants');

	function ContentBase(name) {
		this.name = name;
		this.fps = 60;
		this._animationFrameId = false;
		this._currentTime = 0;
		this._delta = 0;
		this._interval = false;
		this._lastTime = new Date().getTime();
		this.currentFrame = 0;

		window.addEventListener("message", this.receiveMessage.bind(this), false);

		this.__drawLoop = this._drawLoop.bind(this);
		this._interval = 1000 / this.fps;
	}

	ContentBase.prototype.receiveMessage = function(event) {
		if(!event.data) {
			return;
		}
		switch(event.data.action) {
			case 'setState':
				this.setState(event.data.state);
				break;
			case Constants.SOCKET_RECEIVE:
				this.receiveSocketMessage(event.data.message);
				break;
			default:
				this.handleMessage(event.data);
				break;
		}
	};

	ContentBase.prototype.postMessage = function(data) {
		parent.postMessage(data, "*");
	};

	ContentBase.prototype.handleMessage = function(data) {
	};

	ContentBase.prototype.postSocketMessage = function(message) {
		this.postMessage({
			action: Constants.SOCKET_SEND,
			message: message
		});
	};

	ContentBase.prototype.receiveSocketMessage = function(message) {
		//console.log('ContentBase.prototype.receiveSocketMessage ' + this.name, message);
	};

	ContentBase.prototype.setState = function(state) {
		if(state !== this.state) {
			this.state = state;
			this.onStateChanged();
			if(this.state === Constants.STATE_ACTIVE) {
				this.currentFrame = 0;
				this._drawLoop();
			} else {
				window.cancelAnimationFrame(this._animationFrameId);
			}
		}
	};

	ContentBase.prototype.onStateChanged = function() {
	};

	ContentBase.prototype._drawLoop = function() {
		this._animationFrameId = window.requestAnimationFrame(this.__drawLoop);
		this._currentTime = (new Date()).getTime();
	    this._delta = (this._currentTime - this._lastTime);
	    if(this._delta > this._interval) {
	    	this.currentFrame++;
	    	this.drawLoop(this._delta);
	    	this._lastTime = this._currentTime - (this._delta % this._interval);
	    }
	};

	ContentBase.prototype.drawLoop = function(delta) {
	};

	return ContentBase;

})();
},{"Constants":"Constants"}],"shared/IFrameBridge":[function(require,module,exports){
module.exports = (function(){
	function getIframeWindow(iframe_object) {
		var doc;

		if (iframe_object.contentWindow) {
			return iframe_object.contentWindow;
		}

		if (iframe_object.window) {
			return iframe_object.window;
		} 

		if (!doc && iframe_object.contentDocument) {
			doc = iframe_object.contentDocument;
		} 

		if (!doc && iframe_object.document) {
			doc = iframe_object.document;
		}

		if (doc && doc.defaultView) {
		 return doc.defaultView;
		}

		if (doc && doc.parentWindow) {
			return doc.parentWindow;
		}

		return undefined;
	}

	function IFrameBridge(data) {
		this.data = data;
		this.name = this.data.name;
	}

	IFrameBridge.prototype.isAlreadyCorrectlyAttached = function(iframe, src) {
		return (this.iframe === iframe && $(iframe).attr('name') === this.name && $(iframe).attr('src') === src);
	};

	IFrameBridge.prototype.attachToIframe = function(iframe, src, cb) {
		this.iframe = iframe;
		$(iframe).off('load');
		$(iframe).attr('name', this.name);
		if(src !== $(iframe).attr('src')) {
			$(iframe).on('load', (function(event){
				this.tryToPostMessage({
					action: 'setState',
					state: this.state
				});
				cb();
			}).bind(this));
			$(iframe).attr('src', src);
		}
	};

	IFrameBridge.prototype.setState = function(state) {
		this.state = state;
		this.tryToPostMessage({
			action: 'setState',
			state: this.state
		});
	};

	IFrameBridge.prototype.tryToPostMessage = function(message) {
		if(!this.iframe) {
			return;
		}
		var w = getIframeWindow(this.iframe);
		if(w) {
			w.postMessage(message, "*");
		}
	};

	return IFrameBridge;
})();
},{}],"shared/MobileServerBridge":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');

	function MobileServerBridge(presentation, url) {
		this.presentation = presentation;
		this.url = url;
		this.connect();
	}

	MobileServerBridge.prototype.connect = function() {
		console.log('MobileServerBridge.connect');
		$.post(this.url + '/login', this.getLoginCredentials()).done(this.loginHandler.bind(this))
		.fail((function() {
			//retry after one second
			setTimeout((function(){
				this.connect();
			}).bind(this), 1000);
	  }).bind(this));
	};

	MobileServerBridge.prototype.getLoginCredentials = function() {
		return {};
	};

	MobileServerBridge.prototype.loginHandler = function(result) {
		this.token = result.token;
		this.socket = io(this.url, {
			query: 'token=' + this.token,
			reconnection: false,
			forceNew: true
		});
		this.socket.on('connect', this.socketConnectHandler.bind(this));
		this.socket.on('disconnect', this.socketDisconnectHandler.bind(this));
		this.socket.on('message', this.socketMessageHandler.bind(this));
	};

	MobileServerBridge.prototype.socketConnectHandler = function() {
		console.log('MobileServerBridge.socketConnectHandler');
		this.presentation.mobileServerBridgeConnected();
	};

	MobileServerBridge.prototype.socketDisconnectHandler = function() {
		this.connect();
	};

	MobileServerBridge.prototype.tryToSend = function() {
		if(this.socket) {
			this.socket.emit.apply(this.socket, arguments);
		}
	};

	MobileServerBridge.prototype.socketMessageHandler = function(message) {
		this.presentation.mobileServerMessageHandler(message);
	};

	return MobileServerBridge;
})();
},{"Constants":"Constants"}],"shared/Presentation":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');
	var IFrameBridge = require('./IFrameBridge');

	/*
	 * data: json object with slides array property
	 * role: mobile or presentation
	 */
	function Presentation(data, role) {
		this.data = data;
		this.role = role;
		this.currentSlideIndex = -1;
		this.iframes = [];
		this.numIframes = 3;
		this.iFrameBridges = [];
		this.iFrameBridgesBySlideName = {};

		this.createIFrames();
		this.createIFrameBridges(this.data);

		this.mobileServerBridge = this.createMobileServerBridge();
		window.addEventListener("message", this.iFrameMessageHandler.bind(this), false);

		this.setCurrentSlideIndex(0);
	}

	Presentation.prototype.createIFrames = function() {
		for(var i = 0; i < this.numIframes; i++) {
			var $iframe = $('<iframe class="slide-frame" />');
			this.iframes.push($iframe);
			$('#presentation').append($iframe);
		}
	};

	Presentation.prototype.createIFrameBridges = function(data) {
		var that = this;
		var numSlides = data.slides.length;
		for(var i = 0; i < numSlides; i++) {
			var iFrameBridge = this.createIframeBridge(data.slides[i]);
			this.iFrameBridges.push(iFrameBridge);
			this.iFrameBridgesBySlideName[iFrameBridge.name] = iFrameBridge;
		}
	};

	Presentation.prototype.createIframeBridge = function(slide) {
		return new IFrameBridge(slide);
	};

	Presentation.prototype.iFrameMessageHandler = function(event) {
		if(!event.data) {
			return;
		}
		switch(event.data.action) {
			case Constants.SOCKET_SEND:
				if(this.mobileServerBridge) {
					this.mobileServerBridge.tryToSend(Constants.MESSAGE, event.data.message);
				}
				break;
		}
	};

	Presentation.prototype.mobileServerBridgeConnected = function() {
		//join the rooms of the iframes
		for(var i = 0; i < this.numIframes; i++) {
			this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(this.iframes[i]).attr('name'));
		}
	};

	Presentation.prototype.mobileServerMessageHandler = function(message) {
		if(message.target.slide) {
			//slide has to handle the message
			var iFrameBridge = this.getIFrameBridgeBySlideName(message.target.slide);
			if(iFrameBridge) {
				iFrameBridge.tryToPostMessage({
					action: Constants.SOCKET_RECEIVE,
					message: message
				});
			}
		} else {
			//presentation has to handle the message
			this.handleMobileServerMessage(message);
		}
	};

	Presentation.prototype.handleMobileServerMessage = function(message) {
		console.log('[shared/Presentation] handleMobileServerMessage', message);
	};

	Presentation.prototype.getIFrameBridgeByIndex = function(index) {
		if(index >= 0 && index < this.iFrameBridges.length) {
			return this.iFrameBridges[index];
		}
		return false;
	};

	Presentation.prototype.getIFrameBridgeBySlideName = function(slideName) {
		return this.iFrameBridgesBySlideName[slideName];
	};

	Presentation.prototype.getIFrameForSlide = function(slide, slidesNotToClear) {
		if(slide) {
			var $iframe = $('iframe[name=' + slide.name + ']');
			if($iframe.length > 0) {
				return $iframe[0];
			}
			//get a free iframe
			var slideNamesNotToClear = [];
			$(slidesNotToClear).each(function(index, obj){
				slideNamesNotToClear.push(obj.name);
			});
			var $iframes = $('iframe.slide-frame');
			for (var i = $iframes.length - 1; i >= 0; i--) {
				$iframe = $($iframes[i]);
				var name = $iframe.attr('name');
				if(!name || slideNamesNotToClear.indexOf(name) === -1) {
					return $iframe[0];
				}
			}
		}
		return false;
	};

	Presentation.prototype.goToPreviousSlide = function() {
		this.setCurrentSlideIndex(this.currentSlideIndex - 1);
	};

	Presentation.prototype.goToNextSlide = function() {
		this.setCurrentSlideIndex(this.currentSlideIndex + 1);
	};

	Presentation.prototype.setCurrentSlideIndex = function(value) {
		value = Math.max(0, Math.min(value, this.iFrameBridges.length - 1));
		if(value !== this.currentSlideIndex) {
			this.currentSlideIndex = value;

			var currentIFrameBridge = this.getIFrameBridgeByIndex(this.currentSlideIndex);
			var previousIFrameBridge = this.getIFrameBridgeByIndex(this.currentSlideIndex - 1);
			var nextIFrameBridge = this.getIFrameBridgeByIndex(this.currentSlideIndex + 1);

			var currentIframe = this.getIFrameForSlide(currentIFrameBridge, [previousIFrameBridge, nextIFrameBridge]);
			this.setupIFrame(currentIframe, currentIFrameBridge, Constants.STATE_ACTIVE, 0);

			var previousIframe = this.getIFrameForSlide(previousIFrameBridge, [currentIFrameBridge, nextIFrameBridge]);
			this.setupIFrame(previousIframe, previousIFrameBridge, Constants.STATE_INACTIVE, '-100%');

			var nextIframe = this.getIFrameForSlide(nextIFrameBridge, [previousIFrameBridge, currentIFrameBridge]);
			this.setupIFrame(nextIframe, nextIFrameBridge, Constants.STATE_INACTIVE, '100%');

			//all other iframe bridges should be unlinked from their iframe
			this.iFrameBridges.forEach(function(iFrameBridge){
				if(iFrameBridge === currentIFrameBridge) {
					return;
				}
				if(iFrameBridge === previousIFrameBridge) {
					return;
				}
				if(iFrameBridge === nextIFrameBridge) {
					return;
				}
				iFrameBridge.iframe = null;
			});

			bean.fire(this, Constants.SET_CURRENT_SLIDE_INDEX, [this.currentSlideIndex]);
		}
	};

	Presentation.prototype.setupIFrame = function(iFrame, iFrameBridge, state, left) {
		if(iFrame) {
			var src = "slides/" + iFrameBridge.name + '.html';
			if(iFrameBridge.data[this.role] && iFrameBridge.data[this.role].url) {
				src = iFrameBridge.data[this.role].url;
			}
			if(iFrameBridge.isAlreadyCorrectlyAttached(iFrame, src)) {
				console.log(iFrameBridge.name + ' already attached');
			} else {
				//leave previous channel of this iframe
				if(this.mobileServerBridge) {
					this.mobileServerBridge.tryToSend(Constants.LEAVE_SLIDE_ROOM, $(iFrame).attr('name'));
				}
				//add the join as a callback for the onload event
				iFrameBridge.attachToIframe(iFrame, src, (function(){
					//join new channel
					if(this.mobileServerBridge) {
						this.mobileServerBridge.tryToSend(Constants.JOIN_SLIDE_ROOM, $(iFrame).attr('name'));
					}
				}).bind(this));
			}
			iFrameBridge.setState(state);
			$(iFrame).css('left', left);
		}
	};

	Presentation.prototype.createMobileServerBridge = function() {
		//to implement in extending classes
	};

	return Presentation;

})();
},{"./IFrameBridge":"shared/IFrameBridge","Constants":"Constants"}],"slides/ChildAppEditor":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');

	function ChildAppEditor(name, type) {
		ContentBase.call(this, name);
		this.type = type;

		this.slideControlEnabled = false;
		console.log("[ChildAppEditor] init");

		this.codeMirror = CodeMirror.fromTextArea(document.getElementById('code'), {
			lineNumbers: true,
			mode: "javascript",
			extraKeys: {"Ctrl-Space": "autocomplete"}
	    });

	    $('.btn-save').on('click', $.proxy(this.saveClickHandler, this));
	    $('.btn-run').on('click', $.proxy(this.runClickHandler, this));
	}

	ChildAppEditor.prototype = Object.create(ContentBase.prototype);

	ChildAppEditor.prototype.saveClickHandler = function() {
		var code = this.codeMirror.getValue();
		this.postMessage({
			action: Constants.CHILD_APP_SAVE_CODE,
			code: code,
			type: this.type
		});
		this.postMessage({
			action: Constants.OPEN_COMMAND_LINE
		});
	};

	ChildAppEditor.prototype.runClickHandler = function() {
		var code = this.codeMirror.getValue();
		this.postMessage({
			action: Constants.CHILD_APP_RUN_CODE,
			code: code,
			type: this.type
		});
		this.postMessage({
			action: Constants.OPEN_CAMERA
		});
	};

	return ChildAppEditor;

})();
},{"../ContentBase":9,"Constants":"Constants"}],"slides/HighestHeartrateGame":[function(require,module,exports){
module.exports = (function(){

	var dgram = requireNode('dgram');

	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');
	var GameCharacter = require('./GameCharacter');
	var HeartRateCanvas = require('../../HeartRateCanvas');

	function HighestHeartrateGame() {
		ContentBase.call(this, 'highest-heartrate-game');
		this.winner = false;
		this.flagDropped = false;
		this.sparkIdMap = {};
		this.minHeartRate = 130;
		this.maxHeartRate = 200;

		this._udpErrorHandler = this.udpErrorHandler.bind(this);
		this._udpMessageHandler = this.udpMessageHandler.bind(this);
		this._udpListeningHandler = this.udpListeningHandler.bind(this);

		this.peachCanvas = new HeartRateCanvas(document.getElementById('peach'));
		this.marioCanvas = new HeartRateCanvas(document.getElementById('mario'));

		//game canvas
		this.canvas = document.getElementById('game');
		this.stage = new createjs.Stage(this.canvas);

		this.backgroundFill = new createjs.Shape();
		this.stage.addChild(this.backgroundFill);

		var manifest = [
			{ src: "images/mario/mario-spritesheet.png", id: "characters" },
			{ src: "images/mario/ground.png", id: "ground" },
			{ src: "images/mario/hills.png", id: "hills" },
			{ src: "images/mario/flagpole.png", id: "flagpole" },
			{ src: "images/mario/flag-spritesheet.png", id: "flag" }
		];
		this.loader = new createjs.LoadQueue(false);
		this.loader.addEventListener("complete", $.proxy(this.loadCompleteHandler, this));
		this.loader.loadManifest(manifest);

		createjs.Ticker.setFPS(60);
		createjs.Ticker.addEventListener("tick", this.stage);

		$('.substate-intro .btn').on('click', this.startClickHandler.bind(this));

		this.showCurrentState();
	}

	HighestHeartrateGame.prototype = Object.create(ContentBase.prototype);

	HighestHeartrateGame.prototype.onStateChanged = function() {
		if(this.state === Constants.STATE_ACTIVE) {
			this.udpSocket = dgram.createSocket('udp4');
			this.udpSocket.on("error", this._udpErrorHandler);
			this.udpSocket.on("message", this._udpMessageHandler);
			this.udpSocket.on("listening", this._udpListeningHandler);
			this.udpSocket.bind(1234);
		} else {
			if(this.udpSocket) {
				//close the udp socket
				this.udpSocket.removeListener("error", this._udpErrorHandler);
				this.udpSocket.removeListener("message", this._udpMessageHandler);
				this.udpSocket.removeListener("listening", this._udpListeningHandler);
				this.udpSocket.close();
				this.udpSocket = null;
			}
		}
	};

	HighestHeartrateGame.prototype.udpErrorHandler = function(error) {
		console.log('[HighestHeartrateGame] udpErrorHandler', error);
		this.udpSocket.close();
	};

	HighestHeartrateGame.prototype.udpMessageHandler = function(message, remoteInfo) {
		var str = message.toString();
		var split = str.split(';');
		if(split.length > 2) {
			this.setHeartRate(split[0], split[2]);
		}
	};

	HighestHeartrateGame.prototype.udpListeningHandler = function() {
		console.log('[HighestHeartrateGame] udpListening');
	};

	HighestHeartrateGame.prototype.setHeartRate = function(id, heartRate) {
		heartRate = parseInt(heartRate);
		if(this.peach) {
			//assets are ready
			if(!this.sparkIdMap[id]) {
				if(!this.peach.sparkId) {
					this.sparkIdMap[id] = {
						character: this.peach,
						heartRateCanvas: this.peachCanvas,
						$col: $('.col-peach')
					};
					this.peach.sparkId = id;
				} else if(!this.mario.sparkId) {
					this.sparkIdMap[id] = {
						character: this.mario,
						heartRateCanvas: this.marioCanvas,
						$col: $('.col-mario')
					};
					this.mario.sparkId = id;
				}
			}
			if(this.sparkIdMap[id]) {
				//update canvas
				this.sparkIdMap[id].heartRateCanvas.updateHeartRate(heartRate);
				//update text
				this.sparkIdMap[id].$col.find('.heartRate').text(heartRate);
				//update character speed
				if(this.substate === Constants.HIGHEST_HEARTRATE_GAME_GAME && !this.winner) {
					var targetSpeed = Math.min(1, Math.max(0, this.map(heartRate, this.minHeartRate, this.maxHeartRate, 0, 1)));
					this.sparkIdMap[id].character.setSpeedX(targetSpeed);
				}
			}
		}
	};

	HighestHeartrateGame.prototype.loadCompleteHandler = function() {
		this.hillsImage = this.loader.getResult("hills");
		this.hills = new createjs.Shape();
		this.hills.tileW = this.hillsImage.width;

		this.groundImage = this.loader.getResult("ground");
		this.ground = new createjs.Shape();
		this.ground.tileW = this.groundImage.width;

		this.flagpole = new createjs.Bitmap(this.loader.getResult("flagpole"));

		this.flag = new createjs.Sprite(new createjs.SpriteSheet(
			{
				images: [this.loader.getResult("flag")], 
				frames:[
					[0, 0, 32, 32, 0, 0, 0],
					[32, 0, 32, 32, 0, 0, 0],
					[0, 32, 32, 32, 0, 0, 0],
				],
				animations: {
					moving:{ frames:[0, 1, 2, ], frequency:4, next:true},
				}
			}
		), "moving");
		this.flag.framerate = 8;

		this.peach = new GameCharacter(new createjs.SpriteSheet(
		{
			images: [this.loader.getResult("characters")],
			frames:[
				[0, 0, 32, 64, 0, 0, 0],
				[32, 0, 32, 64, 0, 0, 0],
				[64, 0, 32, 64, 0, 0, 0],
				[96, 0, 32, 64, 0, 0, 0],
				[0, 64, 32, 64, 0, 0, 0],],
				animations: {
				run:{ frames:[0, 1, 2, 3, ], frequency:4, next:true},
				jump:{ frames:[4, ], frequency:4, next:true},}
		}));
		this.peach.name = "peach";

		this.mario = new GameCharacter(new createjs.SpriteSheet(
		{
			images: [this.loader.getResult("characters")],
			frames:[
				[32, 64, 32, 64, 0, 0, 0],
				[64, 64, 32, 64, 0, 0, 0],
				[96, 64, 32, 64, 0, 0, 0],
				[0, 128, 32, 64, 0, 0, 0],
				[32, 128, 32, 64, 0, 0, 0],],
				animations: {
				run:{ frames:[0, 1, 2, 3, ], frequency:4, next:true},
				jump:{ frames:[4, ], frequency:4, next:true},}
		}));
		this.mario.name = "mario";

		this.resetGame();

		this.stage.addChild(this.hills, this.ground, this.flagpole, this.flag, this.mario.sprite, this.peach.sprite);
		this.resizeHandler();

		//fake control of characters
		$(window).on('keydown', this.keydownHandler.bind(this));
	};

	HighestHeartrateGame.prototype.setSubstate = function(substate) {
		if(this.substate !== substate) {
			this.substate = substate;
			this.showCurrentState();
		}
	};

	HighestHeartrateGame.prototype.showCurrentState = function() {
		$('.substate').removeClass('active');
		if(this.substate === Constants.HIGHEST_HEARTRATE_GAME_GAME) {
			this.resetGame();
			$('.substate-game').addClass('active');
		} else if(this.substate === Constants.HIGHEST_HEARTRATE_GAME_FINISHED) {
			$('.substate-finished').addClass('active');
		} else {
			$('.substate-intro').addClass('active');
		}
	};

	HighestHeartrateGame.prototype.map = function(value, istart, istop, ostart, ostop) {
		return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
	};

	HighestHeartrateGame.prototype.startClickHandler = function() {
		this.setSubstate(Constants.HIGHEST_HEARTRATE_GAME_GAME);
	};

	HighestHeartrateGame.prototype.resetGame = function() {
		this.winner = false;
		this.flagDropped = false;
		if(this.peach) {
			this.peach.setSpeedX(0);
			this.mario.setSpeedX(0);

			this.peach.sprite.x = 50;
			this.mario.sprite.x = 10;

			this.flag.y = this.flagpole.y + 16;
			this.flag.gotoAndPlay("moving");
		}
	};

	HighestHeartrateGame.prototype.drawLoop = function() {
		if(this.peach) {
			this.peach.update();
			this.mario.update();
			if(!this.winner) {
				if(this.peach.sprite.x >= this.peach.finalX) {
					this.setWinner(this.peach);
				} else if(this.mario.sprite.x >= this.mario.finalX) {
					this.setWinner(this.mario);
				}
			} else {
				//stop the non-winner
				if(this.winner === this.mario) {
					this.peach.setSpeedX(0);
				} else {
					this.mario.setSpeedX(0);
				}
				//drop flag?
				if(!this.flagDropped && this.winner.sprite.x >= this.flagpole.x) {
					this.flagDropped = true;
					this.flag.gotoAndStop("moving");
					this.winner.setSpeedX(0);
				}
				if(this.flagDropped) {
					//follow the winner down
					this.flag.y = this.winner.sprite.y;
				}
			}
		}
	};

	HighestHeartrateGame.prototype.setWinner = function(winner) {
		this.winner = winner;
		this.winner.setSpeedX(1);
		this.winner.jump(22);
		this.winner.finalReached = true;
		$('.substate-finished .winner').text(this.winner.name + " wins!");
		this.setSubstate(Constants.HIGHEST_HEARTRATE_GAME_FINISHED);
	};

	HighestHeartrateGame.prototype.keydownHandler = function(event) {
		if(!this.winner) {
			switch(event.keyCode) {
				case 65: //a
					this.peach.setSpeedX(0.5);
					break;
				case 90: //z
					this.mario.setSpeedX(0.5);
					break;
				default:
					this.peach.setSpeedX(0);
					this.mario.setSpeedX(0);
					break;
			}
		}
	};

	HighestHeartrateGame.prototype.resizeHandler = function() {
		//resize the canvas
		var w = this.canvas.width = window.innerWidth;
		var h = this.canvas.height = window.innerHeight;

		this.backgroundFill.graphics.beginFill('#5088a0').drawRect(0, 0, w, h).endFill();

		if(this.loader.loaded) {
			this.hills.graphics.clear();
			this.hills.graphics.beginBitmapFill(this.hillsImage).drawRect(0, 0, w+this.hillsImage.width, this.hillsImage.height);
			this.hills.y = h-this.hillsImage.height-this.groundImage.height;

			this.ground.graphics.clear();
			this.ground.graphics.beginBitmapFill(this.groundImage).drawRect(0, 0, w+this.groundImage.width, this.groundImage.height);
			this.ground.y = h-this.groundImage.height;

			this.flagpole.x = w - 100;
			this.flagpole.y = this.ground.y - this.flagpole.getBounds().height;

			this.peach.minX = this.mario.minX = 0;
			this.peach.maxX = this.mario.maxX = w - 50;

			this.peach.maxY = this.ground.y - this.peach.sprite.getBounds().height;
			this.mario.maxY = this.ground.y - this.mario.sprite.getBounds().height;

			this.peach.finalX = this.mario.finalX = this.flagpole.x - 100;

			this.flag.x = this.flagpole.x + 16;
			if(this.winner && this.flagDropped) {
				this.flag.y = this.winner.y;
			} else {
				this.flag.y = this.flagpole.y + 16;
			}
		}
	};

	return HighestHeartrateGame;

})();
},{"../../HeartRateCanvas":3,"../ContentBase":9,"./GameCharacter":10,"Constants":"Constants"}],"slides/IntroPoster":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');
	var ContentBase = require('../ContentBase');
	var HeartRateCanvas = require('../../HeartRateCanvas');

	function IntroPoster() {
		ContentBase.call(this, 'intro-poster');
		console.log("[IntroPoster] init");

		this.heartRateCanvas = new HeartRateCanvas(document.getElementById('polarHeartRateCanvas'));
		this.heartRateCanvas.showHeartRateTextInBackground = true;
		this.heartRateCanvas.updateHeartRate(60);//default 60 bpm
		this.resizeHeartRateCanvas();

		$(window).on('resize', $.proxy(this.resizeHandler, this));
	}

	IntroPoster.prototype = Object.create(ContentBase.prototype);

	IntroPoster.prototype.handleMessage = function(data) {
		if(data.action === Constants.HEART_RATE_POLAR) {
			this.updateHeartRate(data.heartRate);
		}
	};

	IntroPoster.prototype.updateHeartRate = function(heartRate) {
		this.heartRateCanvas.updateHeartRate(heartRate);
		$('.background.heartrate').text(heartRate);
	};

	IntroPoster.prototype.resizeHandler = function() {
		this.resizeHeartRateCanvas();
	};

	IntroPoster.prototype.resizeHeartRateCanvas = function() {
		this.heartRateCanvas.resize(window.innerWidth, window.innerHeight / 2);
	};

	return IntroPoster;

})();
},{"../../HeartRateCanvas":3,"../ContentBase":9,"Constants":"Constants"}],"slides/LowestHeartrateGame":[function(require,module,exports){
module.exports = (function(){

	var dgram = requireNode('dgram');

	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');
	var GameCharacter = require('./GameCharacter');
	var HeartRateCanvas = require('../../HeartRateCanvas');

	function LowestHeartrateGame() {
		ContentBase.call(this, 'lowest-heartrate-game');

		this.sparkIdMap = {};
		this.beamPosition = 0.5;
		this.maxHeartRate = 100;
		this.winner = false;

		this._udpErrorHandler = this.udpErrorHandler.bind(this);
		this._udpMessageHandler = this.udpMessageHandler.bind(this);
		this._udpListeningHandler = this.udpListeningHandler.bind(this);

		console.log("[LowestHeartrateGame] init");

		$('.substate-intro .btn').on('click', this.startClickHandler.bind(this));

		//heart rate canvas
		this.gokuCanvas = new HeartRateCanvas(document.getElementById('goku'));
		this.gohanCanvas = new HeartRateCanvas(document.getElementById('gohan'));

		//game canvas
		this.canvas = document.getElementById('game');
		this.stage = new createjs.Stage(this.canvas);

		this.backgroundFill = new createjs.Shape();
		this.stage.addChild(this.backgroundFill);

		var manifest = [
			{ src: "images/dragonball/dragonball-spritesheet.png", id: "characters" },
			{ src: "images/dragonball/beam.png", id: "beam" },
			{ src: "images/dragonball/background.png", id: "background" },
			{ src: "images/dragonball/floor.png", id: "floor" }
		];
		this.loader = new createjs.LoadQueue(false);
		this.loader.addEventListener("complete", this.loadCompleteHandler.bind(this));
		this.loader.loadManifest(manifest);

		createjs.Ticker.setFPS(60);
		createjs.Ticker.addEventListener("tick", this.stage);

		this.showCurrentState();
		$(window).on('resize', this.resizeHandler.bind(this));
		this.resizeHandler();
	}

	LowestHeartrateGame.prototype = Object.create(ContentBase.prototype);

	LowestHeartrateGame.prototype.onStateChanged = function() {
		if(this.state === Constants.STATE_ACTIVE) {
			this.udpSocket = dgram.createSocket('udp4');
			this.udpSocket.on("error", this._udpErrorHandler);
			this.udpSocket.on("message", this._udpMessageHandler);
			this.udpSocket.on("listening", this._udpListeningHandler);
			this.udpSocket.bind(1234);
		} else {
			if(this.udpSocket) {
				//close the udp socket
				this.udpSocket.removeListener("error", this._udpErrorHandler);
				this.udpSocket.removeListener("message", this._udpMessageHandler);
				this.udpSocket.removeListener("listening", this._udpListeningHandler);
				this.udpSocket.close();
				this.udpSocket = null;
			}
		}
	};

	LowestHeartrateGame.prototype.udpErrorHandler = function(error) {
		console.log('[LowestHeartrateGame] udpErrorHandler', error);
		this.udpSocket.close();
	};

	LowestHeartrateGame.prototype.udpMessageHandler = function(message, remoteInfo) {
		var str = message.toString();
		var split = str.split(';');
		if(split.length > 2) {
			this.setHeartRate(split[0], split[2]);
		}
	};

	LowestHeartrateGame.prototype.udpListeningHandler = function() {
		console.log('[LowestHeartrateGame] udpListening');
	};

	LowestHeartrateGame.prototype.loadCompleteHandler = function() {
		this.backgroundImage = new createjs.Bitmap(this.loader.getResult("background"));
		this.floorImage = new createjs.Bitmap(this.loader.getResult("floor"));

		this.goku = new GameCharacter(new createjs.SpriteSheet(
		{
			images: [this.loader.getResult("characters")],
			frames:[
				[364, 364, 182, 182, 0, 0, 0],
				[546, 364, 182, 182, 0, 0, 0],
				[728, 364, 182, 182, 0, 0, 0],
				[0, 546, 182, 182, 0, 0, 0],
				[182, 546, 182, 182, 0, 0, 0],
				[364, 546, 182, 182, 0, 0, 0],
				[546, 546, 182, 182, 0, 0, 0],
				[728, 546, 182, 182, 0, 0, 0],
				[0, 728, 182, 182, 0, 0, 0],
				[182, 728, 182, 182, 0, 0, 0],],
				animations: {
				falling:{ frames:[0, 1, 2, 3, 4, 5, 6, ], frequency:4, next:false},
				kameha:{ frames:[7, ], frequency:4, next:true},
				standing:{ frames:[8, 9, ], frequency:4, next:true},}
		}));
		this.goku.name = "goku";

		this.gohan = new GameCharacter(new createjs.SpriteSheet(
		{
			images: [this.loader.getResult("characters")],
			frames:[
				[364, 0, 182, 182, 0, 0, 0],
				[546, 0, 182, 182, 0, 0, 0],
				[728, 0, 182, 182, 0, 0, 0],
				[0, 182, 182, 182, 0, 0, 0],
				[182, 182, 182, 182, 0, 0, 0],
				[364, 182, 182, 182, 0, 0, 0],
				[546, 182, 182, 182, 0, 0, 0],
				[728, 182, 182, 182, 0, 0, 0],
				[0, 364, 182, 182, 0, 0, 0],
				[182, 364, 182, 182, 0, 0, 0],],
				animations: {
				falling:{ frames:[0, 1, 2, 3, 4, 5, 6, ], frequency:4, next:false},
				kameha:{ frames:[7, ], frequency:4, next:true},
				standing:{ frames:[8, 9, ], frequency:4, next:true},}
		}));
		this.gohan.sprite.scaleX = -1;
		this.gohan.name = "gohan";

		this.beamImage = this.loader.getResult("beam");

		this.gokuBeam = new createjs.Shape();
		this.gokuBeam.regY = this.beamImage.height / 2;
		this.gokuBeam.tileW = this.beamImage.width;

		this.gohanBeam = new createjs.Shape();
		this.gohanBeam.regY = this.beamImage.height / 2;
		this.gohanBeam.tileW = this.beamImage.width;

		this.gokuBeamEnd = new createjs.Sprite(new createjs.SpriteSheet({
			images: [this.loader.getResult("characters")],
			frames:[
				[0, 0, 182, 182, 0, 0, 0],
				[182, 0, 182, 182, 0, 0, 0],],
				animations: {
				beaming:{ frames:[0, 1, ], frequency:4, next:true},}
		}), "beaming");
		this.gokuBeamEnd.regX = this.gokuBeamEnd.getBounds().width / 2 - 20;
		this.gokuBeamEnd.regY = this.gokuBeamEnd.getBounds().height / 2;
		this.gokuBeamEnd.scaleX = -1;
		this.gokuBeamEnd.framerate = 10;

		this.gohanBeamEnd = new createjs.Sprite(new createjs.SpriteSheet({
			images: [this.loader.getResult("characters")],
			frames:[
				[0, 0, 182, 182, 0, 0, 0],
				[182, 0, 182, 182, 0, 0, 0],],
				animations: {
				beaming:{ frames:[0, 1, ], frequency:4, next:true},}
		}), "beaming");
		this.gohanBeamEnd.regX = this.gohanBeamEnd.getBounds().width / 2 - 20;
		this.gohanBeamEnd.regY = this.gohanBeamEnd.getBounds().height / 2;
		this.gohanBeamEnd.framerate = 10;

		this.resizeHandler();
		this.resetGame();

		this.stage.addChild(this.backgroundImage, this.floorImage, this.gohan.sprite, this.goku.sprite, this.gokuBeam, this.gohanBeam, this.gokuBeamEnd, this.gohanBeamEnd);
	};

	LowestHeartrateGame.prototype.setSubstate = function(substate) {
		if(this.substate !== substate) {
			this.substate = substate;
			this.showCurrentState();
		}
	};

	LowestHeartrateGame.prototype.setHeartRate = function(id, heartRate) {
		heartRate = parseInt(heartRate);
		if(this.goku) {
			//assets are ready
			if(!this.sparkIdMap[id]) {
				if(!this.goku.sparkId) {
					this.sparkIdMap[id] = {
						character: this.goku,
						heartRateCanvas: this.gokuCanvas,
						$col: $('.col-goku')
					};
					this.goku.sparkId = id;
				} else if(!this.gohan.sparkId) {
					this.sparkIdMap[id] = {
						character: this.gohan,
						heartRateCanvas: this.gohanCanvas,
						$col: $('.col-gohan')
					};
					this.gohan.sparkId = id;
				}
			}
			if(this.sparkIdMap[id]) {
				//update canvas
				this.sparkIdMap[id].heartRateCanvas.updateHeartRate(heartRate);
				//update text
				this.sparkIdMap[id].$col.find('.heartRate').text(heartRate);
				//update heart rate
				this.sparkIdMap[id].character.heartRate = heartRate;
			}
		}
	};

	LowestHeartrateGame.prototype.map = function(value, istart, istop, ostart, ostop) {
		return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
	};

	LowestHeartrateGame.prototype.startClickHandler = function() {
		this.setSubstate(Constants.LOWEST_HEARTRATE_GAME_GAME);
	};

	LowestHeartrateGame.prototype.showCurrentState = function() {
		$('.substate').removeClass('active');
		if(this.substate === Constants.LOWEST_HEARTRATE_GAME_GAME) {
			this.resetGame();
			$('.substate-game').addClass('active');
		} else if(this.substate === Constants.LOWEST_HEARTRATE_GAME_FINISHED) {
			$('.substate-finished').addClass('active');
		} else {
			$('.substate-intro').addClass('active');
		}
	};

	LowestHeartrateGame.prototype.resetGame = function() {
		this.beamPosition = 0.5;
		this.gokuAbsoluteBeamPosition = this.minBeamEndX;
		this.gohanAbsoluteBeamPosition = this.maxBeamEndX;
		this.winner = false;
	};

	LowestHeartrateGame.prototype.drawLoop = function() {
		if(this.goku) {
			this.goku.update();
			this.gohan.update();

			//update beamPosition according to heart rates
			if(this.goku.heartRate > 0 && this.gohan.heartRate > 0) {
				var heartRateDiff = Math.min(this.maxHeartRate, this.gohan.heartRate) - Math.min(this.maxHeartRate, this.goku.heartRate);
				var newBeamPosition = this.beamPosition + (heartRateDiff * 0.0002);
				this.setBeamPosition(newBeamPosition);
			}

			var targetBeamPosition = this.minBeamEndX + this.beamPosition * this.availableBeamWidth;

			this.gokuAbsoluteBeamPosition += (targetBeamPosition - this.gokuAbsoluteBeamPosition) * 0.2;
			this.gohanAbsoluteBeamPosition += (targetBeamPosition - this.gohanAbsoluteBeamPosition) * 0.2;

			//position the beam ends
			this.gokuBeamEnd.x = this.gokuAbsoluteBeamPosition;
			this.gohanBeamEnd.x = this.gohanAbsoluteBeamPosition;

			//redraw the beams
			this.gokuBeam.x = this.minBeamEndX - 30;
			this.gokuBeam.graphics.clear();
			this.gokuBeam.graphics.beginBitmapFill(this.beamImage).drawRect(0, 0, this.gokuAbsoluteBeamPosition + 20 - this.minBeamEndX, this.beamImage.height);

			this.gohanBeam.x = this.gohanAbsoluteBeamPosition + 10;
			this.gohanBeam.graphics.clear();
			this.gohanBeam.graphics.beginBitmapFill(this.beamImage).drawRect(0, 0, this.maxBeamEndX - this.gohanAbsoluteBeamPosition + 16, this.beamImage.height);

			this.gokuBeam.visible = this.gohanBeam.visible = this.gokuBeamEnd.visible = this.gohanBeamEnd.visible = (this.substate === Constants.LOWEST_HEARTRATE_GAME_GAME);

			if(!this.winner) {
				if(this.substate === Constants.LOWEST_HEARTRATE_GAME_GAME) {
					this.goku.setState('kameha');
					this.gohan.setState('kameha');
					if(this.beamPosition < 0.05) {
						this.setWinner(this.gohan);
					} else if(this.beamPosition > 0.95) {
						this.setWinner(this.goku);
					}
				} else {
					this.goku.setState('standing');
					this.gohan.setState('standing');
				}
			} else {
				if(this.substate !== Constants.LOWEST_HEARTRATE_GAME_GAME) {
					this.winner.setState('standing');
				}
				if(this.winner === this.goku) {
					this.gohan.setState('falling');
				} else {
					this.goku.setState('falling');
				}
			}
		}
	};

	LowestHeartrateGame.prototype.setWinner = function(winner) {
		this.winner = winner;
		if(this.winner === this.gohan) {
			this.beamPosition = -1;
		} else {
			this.beamPosition = 2;
		}
		$('.substate-finished .winner').text(this.winner.name + " wins!");
		//timeout to change state
		setTimeout($.proxy(this.setSubstate, this, Constants.LOWEST_HEARTRATE_GAME_FINISHED), 500);
	};

	LowestHeartrateGame.prototype.resizeHandler = function() {
		//resize the canvas
		var w = this.canvas.width = window.innerWidth;
		var h = this.canvas.height = window.innerHeight;

		this.minBeamEndX = 270;
		this.maxBeamEndX = w - 270;
		this.availableBeamWidth = this.maxBeamEndX - this.minBeamEndX;

		this.backgroundFill.graphics.beginFill('#d87040').drawRect(0, 0, w, h).endFill();

		if(this.goku) {
			this.backgroundImage.x = Math.round(w - this.backgroundImage.getBounds().width) / 2;
			this.backgroundImage.y = h - this.backgroundImage.getBounds().height - 100;

			this.floorImage.x = Math.round(w - this.floorImage.getBounds().width) / 2;
			this.floorImage.y = this.backgroundImage.y + this.backgroundImage.getBounds().height;

			this.goku.sprite.x = 100;
			this.goku.sprite.y = h - this.goku.sprite.getBounds().height;

			this.gohan.sprite.x = w - 100;
			this.gohan.sprite.y = h - this.gohan.sprite.getBounds().height;

			//beams
			this.gokuBeamEnd.y = this.gohanBeamEnd.y = h - 120;
			this.gokuBeam.y = this.gohanBeam.y = this.gokuBeamEnd.y;
		}
	};

	LowestHeartrateGame.prototype.setBeamPosition = function(value) {
		value = Math.max(0, Math.min(1, value));
		if(value !== this.beamPosition) {
			this.beamPosition = value;
		}
	};

	return LowestHeartrateGame;

})();
},{"../../HeartRateCanvas":3,"../ContentBase":9,"./GameCharacter":11,"Constants":"Constants"}],"slides/ReactPhones":[function(require,module,exports){
module.exports = (function(){

	var Constants = require('Constants');
	var ContentBase = require('../ContentBase');

	function ReactPhones() {
		ContentBase.call(this, 'react-phones');

		this.gameDuration = 11;
		this.clientsMap = {};
		this.music = $('#music')[0];

		$('.substate-intro .btn').on('click', this.startClickHandler.bind(this));
		$('.substate-finished .btn').on('click', this.winnerClickHandler.bind(this));

		this.setSubstate(Constants.REACT_PHONES_INTRO);
	}

	ReactPhones.prototype = Object.create(ContentBase.prototype);

	ReactPhones.prototype.setSubstate = function(substate) {
		if(this.substate !== substate) {
			this.substate = substate;
			//send substate to mobile clients
			this.postSocketMessage({
				target: {
					client: 'mobile',
					slide: 'react-phones'
				},
				content: {
					action: Constants.SET_SUBSTATE,
					substate: this.substate
				}
			});
			if(this.substate === Constants.REACT_PHONES_GAME) {
				this.resetAllReactionSpeeds();
			}
			this.showCurrentState();
		}
	};

	ReactPhones.prototype.receiveSocketMessage = function(message) {
		if(!message.content) {
			return;
		}
		if(message.content.action === 'updateRoomList') {
			//message.content.ids is an array with ids in this room
			var clientMapIds = _.keys(this.clientsMap);
			//which ids are new? (in message.content.ids but not in clientsMap)
			var newClientIds = _.difference(message.content.ids, clientMapIds);
			//which ids need to be removed? (in clientsMap but not in message.content.ids)
			var removeClientIds = _.difference(clientMapIds, message.content.ids);
			//update our map
			newClientIds.forEach(function(id){
				this.clientsMap[id] = {
					id: id,
					reactionSpeed: 99999999999
				};
			}, this);
			removeClientIds.forEach(function(id){
				if(this.clientsMap[id]) {
					//this.clientsMap[id].$div.remove();
				}
				delete this.clientsMap[id];
			}, this);

			this.numClientsChanged();
		} else if(message.content.action === Constants.UPDATE_REACTION_SPEED) {
			if(!message.sender) {
				return;
			}
			//message.sender.id contains the origin id
			if(!this.clientsMap[message.sender.id]) {
				return;
			}
			this.clientsMap[message.sender.id].reactionSpeed = message.content.reactionSpeed;
		}
	};

	ReactPhones.prototype.startClickHandler = function() {
		this.setSubstate(Constants.REACT_PHONES_GAME);
	};

	ReactPhones.prototype.winnerClickHandler = function() {
		//get the clienthandler with the largest motion, and blink it's screen
		var winningClient = false;
		var reactionSpeed = 99999999999;
		for(var id in this.clientsMap) {
			if(!this.clientsMap[id].speedWinner && this.clientsMap[id].reactionSpeed < reactionSpeed) {
				winningClient = this.clientsMap[id];
				reactionSpeed = winningClient.reactionSpeed;
			}
		}
		if(winningClient) {
			winningClient.speedWinner = true;
			//send message to this client
			this.postSocketMessage({
				target: {
					client: winningClient.id
				},
				content: {
					action: Constants.BLINK,
					text: '<h1>Spectacular, You Win!</h1>',
					backgroundColor: 'red'
				}
			});
		}
	};

	ReactPhones.prototype.resetAllReactionSpeeds = function() {
		for(var id in this.clientsMap) {
			this.clientsMap[id].reactionSpeed = 0;
			this.clientsMap[id].speedWinner = false;
		}
	};

	ReactPhones.prototype.numClientsChanged = function() {
		$('#connections span').text(_.keys(this.clientsMap).length);
	};

	ReactPhones.prototype.showCurrentState = function() {
		$('.substate').removeClass('active');
		$('body').css({
			backgroundImage: 'none'
		});
		if(this.substate === Constants.REACT_PHONES_GAME) {
			this.music.play();
			$('.substate-game .countdown').html(this.gameDuration);
			$('.substate-game').addClass('active');
			this.countDownTimeout = setTimeout(this.countDownHandler.bind(this, this.gameDuration - 1), 1000);
		} else if(this.substate === Constants.REACT_PHONES_FINISHED) {
			$('.substate-finished').addClass('active');
		} else {
			$('body').css({
				backgroundRepeat: 'no-repeat',
				backgroundSize: 'contain',
				backgroundPosition: 'center center',
				backgroundImage: 'url(images/iphone-connections.png)'
			});
			$('.substate-intro').addClass('active');
		}
	};

	ReactPhones.prototype.countDownHandler = function(timeLeft) {
		$('.substate-game .countdown').html(timeLeft);
		if(timeLeft > 0) {
			this.countDownTimeout = setTimeout(this.countDownHandler.bind(this, timeLeft - 1), 1000);
		} else {
			this.setSubstate(Constants.REACT_PHONES_FINISHED);
		}
	};

	return ReactPhones;

})();
},{"../ContentBase":9,"Constants":"Constants"}],"slides/ShakeYourPhones":[function(require,module,exports){
module.exports = (function(){

	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');

	function ShakeYourPhones() {
		ContentBase.call(this, 'shake-your-phones');

		this.gameDuration = 10; //game lasts 10 seconds
		this.clientsMap = {};

		$('.substate-intro .btn').on('click', this.startClickHandler.bind(this));
		$('.substate-finished .btn').on('click', this.winnerClickHandler.bind(this));

		this.setSubstate(Constants.SHAKE_YOUR_PHONES_INTRO);
	}

	ShakeYourPhones.prototype = Object.create(ContentBase.prototype);

	ShakeYourPhones.prototype.setSubstate = function(substate) {
		if(this.substate !== substate) {
			this.substate = substate;
			//send substate to mobile clients
			this.postSocketMessage({
				target: {
					client: 'mobile',
					slide: 'shake-your-phones'
				},
				content: {
					action: Constants.SET_SUBSTATE,
					substate: this.substate
				}
			});
			if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
				this.resetAllMaximumMotions();
			}
			this.showCurrentState();
		}
	};

	ShakeYourPhones.prototype.receiveSocketMessage = function(message) {
		if(!message.content) {
			return;
		}
		if(message.content.action === 'updateRoomList') {
			//message.content.ids is an array with ids in this room
			var clientMapIds = _.keys(this.clientsMap);
			//which ids are new? (in message.content.ids but not in clientsMap)
			var newClientIds = _.difference(message.content.ids, clientMapIds);
			//which ids need to be removed? (in clientsMap but not in message.content.ids)
			var removeClientIds = _.difference(clientMapIds, message.content.ids);
			//update our map
			newClientIds.forEach(function(id){
				this.clientsMap[id] = {
					id: id,
					maximumMotion: 0,
					size: 10,
					$div: $('<div class="circle">').css({
						position: 'absolute',
						left: Math.random() * 100 + '%',
						top: Math.random() * 100 + '%',
						backgroundColor: 'rgba(' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ',' + Math.round(Math.random() * 255) + ', 0.5)',
						width: '10px',
						height: '10px'
					})
				};
				$('.background .substate-game').append(this.clientsMap[id].$div);
			}, this);
			removeClientIds.forEach(function(id){
				if(this.clientsMap[id]) {
					this.clientsMap[id].$div.remove();
				}
				delete this.clientsMap[id];
			}, this);

			this.numClientsChanged();
		} else if(message.content.action === Constants.UPDATE_MAXIMUM_MOTION) {
			if(!message.sender) {
				return;
			}
			//message.sender.id contains the origin id
			if(!this.clientsMap[message.sender.id]) {
				return;
			}
			this.clientsMap[message.sender.id].maximumMotion = message.content.maximumMotion;
		}
	};

	ShakeYourPhones.prototype.startClickHandler = function() {
		this.setSubstate(Constants.SHAKE_YOUR_PHONES_GAME);
	};

	ShakeYourPhones.prototype.winnerClickHandler = function() {
		//get the clienthandler with the largest motion, and blink it's screen
		var winningClient = false;
		var maximumMotion = -1;
		for(var id in this.clientsMap) {
			if(!this.clientsMap[id].shakeWinner && this.clientsMap[id].maximumMotion > maximumMotion) {
				winningClient = this.clientsMap[id];
				maximumMotion = winningClient.maximumMotion;
			}
		}
		if(winningClient) {
			winningClient.shakeWinner = true;
			//send message to this client
			this.postSocketMessage({
				target: {
					client: winningClient.id
				},
				content: {
					action: Constants.BLINK,
					text: '<h1>Spectacular, You Win!</h1>',
					backgroundColor: 'red'
				}
			});
		}
	};

	ShakeYourPhones.prototype.resetAllMaximumMotions = function() {
		for(var id in this.clientsMap) {
			this.clientsMap[id].maximumMotion = 0;
			this.clientsMap[id].shakeWinner = false;
		}
	};

	ShakeYourPhones.prototype.numClientsChanged = function() {
		$('#connections span').text(_.keys(this.clientsMap).length);
	};

	ShakeYourPhones.prototype.showCurrentState = function() {
		$('.substate').removeClass('active');
		$('body').css({
			backgroundImage: 'none'
		});
		if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
			$('.substate-game .countdown').html(this.gameDuration);
			$('.substate-game').addClass('active');
			this.countDownTimeout = setTimeout(this.countDownHandler.bind(this, this.gameDuration - 1), 1000);
		} else if(this.substate === Constants.SHAKE_YOUR_PHONES_FINISHED) {
			$('.substate-finished').addClass('active');
		} else {
			$('body').css({
				backgroundRepeat: 'no-repeat',
				backgroundSize: 'contain',
				backgroundPosition: 'center center',
				backgroundImage: 'url(images/iphone-connections.png)'
			});
			$('.substate-intro').addClass('active');
		}
	};

	ShakeYourPhones.prototype.countDownHandler = function(timeLeft) {
		$('.substate-game .countdown').html(timeLeft);
		if(timeLeft > 0) {
			this.countDownTimeout = setTimeout(this.countDownHandler.bind(this, timeLeft - 1), 1000);
		} else {
			this.setSubstate(Constants.SHAKE_YOUR_PHONES_FINISHED);
		}
	};

	ShakeYourPhones.prototype.drawLoop = function() {
		if(this.substate === Constants.SHAKE_YOUR_PHONES_GAME) {
			$.each(this.clientsMap, function(key, value){
				var target = 3 * Math.max(10, value.maximumMotion);
				value.size += (target - value.size) * 0.2;
				value.$div.css({
					width: value.size + 'px',
					height: value.size + 'px'
				});
			});
		}
	};

	return ShakeYourPhones;

})();
},{"../ContentBase":9,"Constants":"Constants"}],"slides/SpacebrewDanceGame":[function(require,module,exports){
module.exports = (function(){

	var ContentBase = require('../ContentBase');
	var Constants = require('Constants');
	var DanceGameButton = require('./DanceGameButton');
	var ScoreBar = require('./ScoreBar');

	function SpacebrewDanceGame() {
		ContentBase.call(this, 'spacebrew-dance-game');
		this.tweeningNotes = [];
		this.notesByTime = {"12":[{"name":"blue-up"}],"28":[{"name":"blue-up"}],"29":[{"name":"blue-up"}],"30":[{"name":"blue-up"}],"39":[{"name":"orange-down"}],"48":[{"name":"orange-up"}],"57":[{"name":"orange-down"}],"58":[{"name":"blue-down"}],"66":[{"name":"blue-down"}],"67":[{"name":"blue-left"},{"name":"orange-right"}],"74":[{"name":"blue-left"},{"name":"orange-up"},{"name":"blue-up"},{"name":"orange-right"}],"76":[{"name":"blue-left"},{"name":"orange-up"},{"name":"blue-up"},{"name":"orange-right"}],"77":[{"name":"orange-up"},{"name":"orange-right"}],"9.8":[{"name":"blue-up"}],"10.8":[{"name":"blue-down"}],"12.8":[{"name":"blue-down"}],"14.2":[{"name":"blue-up"}],"15.1":[{"name":"blue-down"}],"16.2":[{"name":"blue-left"}],"18.4":[{"name":"orange-up"}],"19.4":[{"name":"orange-down"}],"20.5":[{"name":"orange-up"}],"21.6":[{"name":"orange-down"}],"22.6":[{"name":"orange-up"}],"23.7":[{"name":"orange-down"}],"24.7":[{"name":"orange-right"}],"26.8":[{"name":"blue-up"}],"27.4":[{"name":"blue-down"}],"28.5":[{"name":"blue-down"}],"29.5":[{"name":"blue-down"}],"30.5":[{"name":"blue-down"}],"31.1":[{"name":"blue-up"}],"31.6":[{"name":"blue-down"}],"32.1":[{"name":"blue-up"}],"32.6":[{"name":"blue-down"}],"33.2":[{"name":"blue-left"}],"35.3":[{"name":"orange-up"}],"35.8":[{"name":"orange-down"}],"36.4":[{"name":"orange-up"}],"36.9":[{"name":"orange-down"}],"37.4":[{"name":"orange-up"}],"37.9":[{"name":"orange-down"}],"38.4":[{"name":"orange-up"}],"39.6":[{"name":"blue-up"}],"40.1":[{"name":"blue-down"}],"40.6":[{"name":"blue-up"}],"41.1":[{"name":"blue-down"}],"41.6":[{"name":"blue-up"}],"42.1":[{"name":"blue-down"}],"42.7":[{"name":"blue-up"}],"43.2":[{"name":"blue-down"}],"43.8":[{"name":"orange-up"}],"44.3":[{"name":"orange-down"}],"44.8":[{"name":"blue-up"}],"45.4":[{"name":"blue-down"}],"45.9":[{"name":"orange-up"}],"46.4":[{"name":"orange-down"}],"46.9":[{"name":"blue-up"}],"47.5":[{"name":"blue-down"}],"48.6":[{"name":"orange-down"}],"49.1":[{"name":"blue-up"}],"49.6":[{"name":"blue-down"}],"50.1":[{"name":"orange-right"}],"50.6":[{"name":"blue-left"}],"52.2":[{"name":"orange-right"}],"52.7":[{"name":"blue-left"}],"53.3":[{"name":"orange-right"}],"53.8":[{"name":"blue-left"}],"54.3":[{"name":"orange-right"}],"54.9":[{"name":"blue-left"}],"55.4":[{"name":"orange-right"}],"55.9":[{"name":"blue-left"}],"56.5":[{"name":"orange-up"}],"57.5":[{"name":"blue-up"}],"58.6":[{"name":"orange-up"}],"59.1":[{"name":"orange-down"}],"59.6":[{"name":"blue-up"}],"60.1":[{"name":"blue-down"}],"60.7":[{"name":"orange-right"}],"61.2":[{"name":"blue-left"}],"61.8":[{"name":"orange-up"}],"62.3":[{"name":"blue-up"}],"62.8":[{"name":"orange-down"}],"63.3":[{"name":"blue-down"}],"63.8":[{"name":"orange-right"}],"64.3":[{"name":"blue-left"}],"64.9":[{"name":"orange-up"}],"65.4":[{"name":"blue-up"}],"65.9":[{"name":"orange-down"}],"66.5":[{"name":"blue-down"},{"name":"orange-down"}],"67.5":[{"name":"blue-left"},{"name":"orange-right"}],"68.1":[{"name":"orange-up"},{"name":"blue-up"}],"68.5":[{"name":"blue-up"}],"68.6":[{"name":"orange-up"}],"69.2":[{"name":"blue-down"}],"69.3":[{"name":"orange-up"},{"name":"blue-up"}],"69.8":[{"name":"blue-down"},{"name":"blue-up"}],"70.3":[{"name":"orange-up"},{"name":"blue-up"}],"70.8":[{"name":"blue-down"},{"name":"blue-up"}],"71.4":[{"name":"blue-down"}],"71.9":[{"name":"blue-left"},{"name":"orange-up"},{"name":"blue-down"}],"72.4":[{"name":"blue-left"},{"name":"blue-down"}],"72.9":[{"name":"blue-left"},{"name":"orange-up"},{"name":"blue-up"},{"name":"orange-right"}],"73.5":[{"name":"blue-up"}],"74.5":[{"name":"blue-up"}],"74.9":[{"name":"blue-left"},{"name":"orange-up"},{"name":"blue-up"},{"name":"orange-right"}],"75.2":[{"name":"orange-up"},{"name":"blue-up"},{"name":"orange-right"}],"75.5":[{"name":"orange-up"},{"name":"blue-up"},{"name":"orange-right"}],"75.7":[{"name":"orange-up"}],"76.2":[{"name":"blue-left"},{"name":"orange-up"},{"name":"blue-up"},{"name":"orange-right"}],"76.5":[{"name":"blue-left"},{"name":"orange-up"},{"name":"blue-up"},{"name":"orange-right"}],"76.7":[{"name":"orange-up"},{"name":"orange-right"}],"77.3":[{"name":"blue-left"},{"name":"orange-up"},{"name":"blue-up"},{"name":"orange-right"}],"77.6":[{"name":"orange-up"},{"name":"orange-right"}]};
		this.noteNameMap = {};
		this.pressedButtons = [];
		this.speed = 3;
		this.timeToReachTarget = 0;
		this.tolerance = 0.15;
		this.noteNames = [
			"blue-up",
			"blue-down",
			"blue-left",
			"orange-up",
			"orange-down",
			"orange-right"
		];
		this.score = 0;
		this.record = true;
		this.recordedKeys = {};
		this.audio = false;
		this.roundedTime = 0;

		this.parseNotesByTime();

		this.audio = $('audio')[0];

		$('.substate-intro .btn').on('click', $.proxy(this.startClickHandler, this));
		$('.substate-game .btn').on('click', $.proxy(this.stopClickHandler, this));

		//spacebrew connection
		this.sb = new Spacebrew.Client("localhost", "DDR Presentation");
		this.sb.onBooleanMessage = $.proxy(this.handleButton, this);
		for (var i = this.noteNames.length - 1; i >= 0; i--) {
			this.sb.addSubscribe(this.noteNames[i], "boolean");
		}
		this.sb.connect();

		//game canvas
		this.canvas = document.getElementById('game');
		this.stage = new createjs.Stage(this.canvas);

		var manifest = [
			{ src: "images/dance/dancegame-buttons.png", id: "buttons" }
		];
		this.loader = new createjs.LoadQueue(false);
		this.loader.addEventListener("complete", $.proxy(this.loadCompleteHandler, this));
		this.loader.loadManifest(manifest);

		createjs.Ticker.setFPS(60);
		createjs.Ticker.addEventListener("tick", $.proxy(this.onTick, this));

		this.showCurrentState();
		$(window).on('resize', $.proxy(this.resizeHandler, this));
		this.resizeHandler();

		$(window).on('keyup', $.proxy(this.keyupHandler, this));
	}

	SpacebrewDanceGame.prototype = Object.create(ContentBase.prototype);

	SpacebrewDanceGame.prototype.parseNotesByTime = function() {
		var notesByTime = {};
		for(var key in this.notesByTime) {
			notesByTime[parseFloat(key)] = this.notesByTime[key];
		}
		this.notesByTime = notesByTime;
		console.log(this.notesByTime);
	};

	SpacebrewDanceGame.prototype.loadCompleteHandler = function() {

		this.buttonsSheet = new createjs.SpriteSheet(
{
images: [this.loader.getResult('buttons')], 
frames:[
[0, 0, 120, 120, 0, 0, 0],
[120, 0, 120, 120, 0, 0, 0],
[240, 0, 120, 120, 0, 0, 0],
[0, 120, 120, 120, 0, 0, 0],
[120, 120, 120, 120, 0, 0, 0],
[240, 120, 120, 120, 0, 0, 0],
[0, 240, 120, 120, 0, 0, 0],
[120, 240, 120, 120, 0, 0, 0],
[240, 240, 120, 120, 0, 0, 0],],
animations: {
'blue-wrong':{ frames:[0, ], frequency:4, next:true},
'orange-wrong':{ frames:[1, ], frequency:4, next:true},
'orange-correct':{ frames:[2, ], frequency:4, next:true},
'blue-correct':{ frames:[3, ], frequency:4, next:true},
'orange-outline':{ frames:[4, ], frequency:4, next:true},
'blue-outline':{ frames:[5, ], frequency:4, next:true},
'neutral-outline':{ frames:[6, ], frequency:4, next:true},
'orange':{ frames:[7, ], frequency:4, next:true},
'blue':{ frames:[8, ], frequency:4, next:true},}
});

		this.transparentBlueLeftButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'left');
		this.transparentBlueUpButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'up');
		this.transparentBlueDownButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'down');
		
		this.transparentOrangeDownButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'down');
		this.transparentOrangeUpButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'up');
		this.transparentOrangeRightButton = new DanceGameButton(this.buttonsSheet, 'neutral-outline', 'right');
		
		this.blueLeftContainer = new createjs.Container();
		this.blueUpContainer = new createjs.Container();
		this.blueDownContainer = new createjs.Container();

		this.orangeDownContainer = new createjs.Container();
		this.orangeUpContainer = new createjs.Container();
		this.orangeRightContainer = new createjs.Container();

		this.stage.addChild(this.blueLeftContainer, this.blueUpContainer, this.blueDownContainer, this.orangeDownContainer, this.orangeUpContainer, this.orangeRightContainer);
		this.stage.addChild(this.transparentBlueLeftButton.sprite, this.transparentBlueUpButton.sprite, this.transparentBlueDownButton.sprite, this.transparentOrangeRightButton.sprite, this.transparentOrangeUpButton.sprite, this.transparentOrangeDownButton.sprite);

		this.noteNameMap = {
			"orange-down": {
				orientation: "down",
				container: this.orangeDownContainer,
				transparentButton: this.transparentOrangeDownButton,
				color: "orange"
			},
			"orange-up": {
				orientation: "up",
				container: this.orangeUpContainer,
				transparentButton: this.transparentOrangeUpButton,
				color: "orange"
			},
			"orange-right": {
				orientation: "right",
				container: this.orangeRightContainer,
				transparentButton: this.transparentOrangeRightButton,
				color: "orange"
			},

			"blue-down": {
				orientation: "down",
				container: this.blueDownContainer,
				transparentButton: this.transparentBlueDownButton,
				color: "blue"
			},
			"blue-up": {
				orientation: "up",
				container: this.blueUpContainer,
				transparentButton: this.transparentBlueUpButton,
				color: "blue"
			},
			"blue-left": {
				orientation: "left",
				container: this.blueLeftContainer,
				transparentButton: this.transparentBlueLeftButton,
				color: "blue"
			}
		};

		this.scoreBar = new ScoreBar();
		this.stage.addChild(this.scoreBar.display);

		this.resetGame();
		this.resizeHandler();
	};

	//override setState, not to use drawLoop
	SpacebrewDanceGame.prototype.setState = function(state) {
		if(state !== this.state) {
			this.state = state;
			this.onStateChanged();
		}
	};

	SpacebrewDanceGame.prototype.setSubstate = function(substate) {
		if(this.substate !== substate) {
			this.substate = substate;
			this.showCurrentState();
		}
	};

	SpacebrewDanceGame.prototype.map = function(value, istart, istop, ostart, ostop) {
		return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
	};

	SpacebrewDanceGame.prototype.round = function(value, numDecimals) {
		var factor = Math.pow(10, numDecimals);
		return Math.round(value * factor) / factor;
	};

	SpacebrewDanceGame.prototype.startClickHandler = function() {
		this.setSubstate(Constants.DANCE_PAD_GAME_GAME);
	};

	SpacebrewDanceGame.prototype.stopClickHandler = function() {
		this.setSubstate(Constants.DANCE_PAD_GAME_FINISHED);
		this.audio.pause();
		if(this.record) {
			console.log(this.recordedKeys);
		}
	};

	SpacebrewDanceGame.prototype.showCurrentState = function() {
		console.log('showCurrentState', this.substate);
		$('.substate').removeClass('active');
		if(this.substate === Constants.DANCE_PAD_GAME_GAME) {
			this.resetGame();
			$('.substate-game').addClass('active');
			if(this.record) {
				this.recordedKeys = {};
			}
			this.roundedTime = 0;
			this.audio.currentTime = 0;
			this.audio.play();
		} else if(this.substate === Constants.DANCE_PAD_GAME_FINISHED) {
			$('.substate-finished').addClass('active');
			if(this.record) {
				console.log(JSON.stringify(this.recordedKeys));
			}
		} else {
			$('.substate-intro').addClass('active');
		}
	};

	SpacebrewDanceGame.prototype.resetGame = function() {
		for(var key in this.notesByTime) {
			for (var i = this.notesByTime[key].length - 1; i >= 0; i--) {
				this.notesByTime[key][i].correct = false;
				this.notesByTime[key][i].tweening = false;
			}
		}
		this.setScore(0.5);
	};

	SpacebrewDanceGame.prototype.onTick = function(event) {
		if(this.loader.loaded) {
			//show button states
			var noteName;
			var note;
			for (var i = this.noteNames.length - 1; i >= 0; i--) {
				noteName = this.noteNames[i];
				var isDown = (this.pressedButtons.indexOf(noteName) !== -1);
				if(isDown) {
					this.noteNameMap[noteName].transparentButton.gotoAndStop(this.noteNameMap[noteName].color + "-outline");
				} else {
					this.noteNameMap[noteName].transparentButton.gotoAndStop("neutral-outline");
				}
			}
			if(this.substate !== Constants.DANCE_PAD_GAME_INTRO) {
				this.roundedTime = this.round(this.audio.currentTime, 1);
				var timeWithOffset = this.round(this.roundedTime + this.timeToReachTarget, 1);
				if(this.notesByTime[timeWithOffset]) {
					for (var j = this.notesByTime[timeWithOffset].length - 1; j >= 0; j--) {
						var noteByTime = this.notesByTime[timeWithOffset][j];
						if(!noteByTime.tweening) {
							noteByTime.tweening = true;
							var mappedNote = this.noteNameMap[noteByTime.name];
							note = new DanceGameButton(this.buttonsSheet, mappedNote.color, mappedNote.orientation);
							note.time = timeWithOffset;
							note.noteByTime = noteByTime;
							note.sprite.y = this.canvas.height;
							mappedNote.container.addChild(note.sprite);
							this.tweeningNotes.push(note);
						}
					}
				}
				var visibleTweeningNotes = [];
				var min = this.roundedTime - this.tolerance;

				var speed = event.delta/1000*this.pixelsPerSecond;

				for (var k = this.tweeningNotes.length - 1; k >= 0; k--) {
					note = this.tweeningNotes[k];
					note.update(speed);
					//check state
					if(note.noteByTime.correct) {
						if(note.state !== DanceGameButton.STATE_CORRECT) {
							note.setState(DanceGameButton.STATE_CORRECT);
							this.increaseScore();
						}
					} else {
						if(note.time < min) {
							if(note.state !== DanceGameButton.STATE_WRONG) {
								note.setState(DanceGameButton.STATE_WRONG);
								this.decreaseScore();
							}
						}
					}
					if(note.sprite.y > -100) {
						visibleTweeningNotes.push(note);
					} else {
						note.sprite.parent.removeChild(note.sprite);
					}
				}
				this.tweeningNotes = visibleTweeningNotes;
			}
			this.scoreBar.update();
		}
		this.stage.update();
	};

	SpacebrewDanceGame.prototype.increaseScore = function() {
		this.setScore(this.score + 0.1);
	};

	SpacebrewDanceGame.prototype.decreaseScore = function() {
		this.setScore(this.score - 0.1);
	};

	SpacebrewDanceGame.prototype.setScore = function(value) {
		value = Math.min(1, Math.max(0, value));
		if(value !== this.score) {
			this.score = value;
			if(this.scoreBar) {
				this.scoreBar.setScore(this.score);
			}
		}
	};

	SpacebrewDanceGame.prototype.keydownHandler = function(event) {
		switch(event.keyCode) {
			case 90: //z - blue up
				return this.handleButton('blue-up', true);
			case 83: //s - blue down
				return this.handleButton('blue-down', true);
			case 81: //q - blue left
				return this.handleButton('blue-left', true);
			case 79: //o - orange up
				return this.handleButton('orange-up', true);
			case 76: //l - orange down
				return this.handleButton('orange-down', true);
			case 77: //m - orange right
				return this.handleButton('orange-right', true);
		}
	};

	SpacebrewDanceGame.prototype.keyupHandler = function(event) {
		switch(event.keyCode) {
			case 90: //z - blue up
				return this.handleButton('blue-up', false);
			case 83: //s - blue down
				return this.handleButton('blue-down', false);
			case 81: //q - blue left
				return this.handleButton('blue-left', false);
			case 79: //o - orange up
				return this.handleButton('orange-up', false);
			case 76: //l - orange down
				return this.handleButton('orange-down', false);
			case 77: //m - orange right
				return this.handleButton('orange-right', false);
		}
	};

	SpacebrewDanceGame.prototype.handleButton = function(name, isDown) {
		var index = this.pressedButtons.indexOf(name);
		if(isDown) {
			if(index === -1) {
				this.pressedButtons.push(name);
				if(this.record) {
					if(!this.recordedKeys[this.roundedTime]) {
						this.recordedKeys[this.roundedTime] = [];
					}
					this.recordedKeys[this.roundedTime].push({name: name});
				}
				//is it on the right time?
				var min = this.round(this.roundedTime - this.tolerance, 1);
				var max = this.round(this.roundedTime + this.tolerance, 1);
				for(var i = min; i < max; i+= 0.1) {
					var note = this.getNoteByTimeAndName(i, name);
					if(note) {
						this.handleCorrectButtonPress(i, name);
						break;
					}
				}
			}
		} else {
			if(index !== -1) {
				this.pressedButtons.splice(index, 1);
			}
		}
	};

	SpacebrewDanceGame.prototype.getNoteByTimeAndName = function(time, name) {
		time = this.round(time, 1);
		if(this.notesByTime[time]) {
			for (var i = this.notesByTime[time].length - 1; i >= 0; i--) {
				if(this.notesByTime[time][i].name === name) {
					return this.notesByTime[time][i];
				}
			}
		}
		return false;
	};

	SpacebrewDanceGame.prototype.handleCorrectButtonPress = function(time, name) {
		//flag it as correct
		var note = this.getNoteByTimeAndName(time, name);
		note.correct = true;
	};

	SpacebrewDanceGame.prototype.resizeHandler = function() {
		//resize the canvas
		var w = this.canvas.width = window.innerWidth;
		var h = this.canvas.height = window.innerHeight;

		var hc = w / 2;
		var vc = h / 2;

		this.pixelsPerSecond = this.speed * this.fps;
		this.timeToReachTarget = this.round(vc / this.pixelsPerSecond, 1);

		if(this.loader.loaded) {
			this.transparentBlueLeftButton.sprite.y = this.transparentBlueUpButton.sprite.y = this.transparentBlueDownButton.sprite.y = this.transparentOrangeRightButton.sprite.y = this.transparentOrangeUpButton.sprite.y = this.transparentOrangeDownButton.sprite.y = vc;

			this.transparentBlueLeftButton.sprite.x = this.blueLeftContainer.x = hc - 500;
			this.transparentBlueUpButton.sprite.x = this.blueUpContainer.x = hc - 350;
			this.transparentBlueDownButton.sprite.x = this.blueDownContainer.x = hc - 200;

			this.transparentOrangeDownButton.sprite.x = this.orangeDownContainer.x = hc + 200;
			this.transparentOrangeUpButton.sprite.x = this.orangeUpContainer.x = hc + 350;
			this.transparentOrangeRightButton.sprite.x = this.orangeRightContainer.x = hc + 500;

			this.scoreBar.display.x = hc - 261;
			this.scoreBar.display.y = 100;
		}
	};

	return SpacebrewDanceGame;

})();
},{"../ContentBase":9,"./DanceGameButton":12,"./ScoreBar":13,"Constants":"Constants"}],"slides/TitleSlide":[function(require,module,exports){
/*
 * http://codepen.io/MIML/pen/iBKyC?editors=001
 */
var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;// jshint ignore:line
window.requestAnimationFrame = requestAnimationFrame;

var maxLifeTime = 5000;

function Smoke(x, y, index) {
	this.x = x;
  this.y = y;

  this.size = 1;
  this.startSize = 32;
  this.endSize = 60;

  this.angle = Math.random() * 359;

  this.startLife = new Date().getTime();
  this.lifeTime = 0;

  this.velY = -2 - (Math.random()*0.5);
  this.velX = Math.floor(Math.random() * (-4) + 2) / 10;
}

Smoke.prototype.update = function() {
	this.lifeTime = new Date().getTime() - this.startLife;
  this.angle += 0.2;
  
  var lifePerc = ((this.lifeTime / maxLifeTime) * 100);

  this.size = this.startSize + ((this.endSize - this.startSize) * lifePerc * 0.1);

  this.alpha = 1 - (lifePerc * 0.01);
  this.alpha = Math.max(this.alpha, 0);
  
  this.x += this.velX;
  this.y += this.velY;
};

function SmokeCanvas(canvas) {
	this.fps = 60;
	this.width = 0;
	this.height = 0;

	this.parts = [];
	this.minSpawnTime = 200;
	this.lastTime = new Date().getTime();
	this.emitterX = 500;
	this.emitterY = 380;
	this.smokeImage = new Image();

	this.canvas = canvas;
	this.canvas.width = window.innerWidth;
	this.canvas.height = window.innerHeight;
	this.ctx = this.canvas.getContext('2d');

	maxLifeTime = Math.min(3000, (this.canvas.height/(1.5*60)*1000));

	var that = this;
	this.smokeImage.src = "images/smoke.png";
	this.smokeImage.onload = function () {
	    that.render();
	};
}

SmokeCanvas.prototype.render = function() {
	var len = this.parts.length;
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

    while (len--) {
        if (this.parts[len].y < 0 || this.parts[len].lifeTime > maxLifeTime) {
            this.parts.splice(len, 1);
        } else {
            this.parts[len].update();

            this.ctx.save();
            var offsetX = -this.parts[len].size/2,
                offsetY = -this.parts[len].size/2;
         
            this.ctx.translate(this.parts[len].x-offsetX, this.parts[len].y-offsetY);
            this.ctx.rotate(this.parts[len].angle / 180 * Math.PI);
            this.ctx.globalAlpha  = this.parts[len].alpha;
            this.ctx.drawImage(this.smokeImage, offsetX,offsetY, this.parts[len].size, this.parts[len].size);
            this.ctx.restore();
        }
    }
    this.spawn();
    requestAnimationFrame($.proxy(this.render, this));
};

SmokeCanvas.prototype.spawn = function() {
	var now = new Date().getTime();
	if(now > this.lastTime - this.minSpawnTime) {
		this.lastTime = now;
		this.parts.push(new Smoke(this.emitterX, this.emitterY));
	}
};

module.exports = SmokeCanvas;
},{}],"slides/VideoSlide":[function(require,module,exports){
module.exports = (function(){
	var ContentBase = require('../ContentBase');

	function VideoSlide(name) {
		ContentBase.call(this, name);

		this.videoPlaying = false;

		this.video = $('video')[0];
		$(this.video).on('click', this.clickHandler.bind(this));
	}

	VideoSlide.prototype = Object.create(ContentBase.prototype);

	VideoSlide.prototype.clickHandler = function(event) {
		this.videoPlaying = !this.videoPlaying;
		if(this.videoPlaying) {
			this.video.play();
		} else {
			this.video.pause();
		}
	};

	return VideoSlide;

})();
},{"../ContentBase":9}]},{},[1])


//# sourceMappingURL=script.min.js.map